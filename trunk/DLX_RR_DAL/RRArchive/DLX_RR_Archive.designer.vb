'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34014
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection

Namespace RRDataSources
	
	<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="DocumentManager")>  _
	Partial Public Class ArchiveDataContext
		Inherits System.Data.Linq.DataContext
		
		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub InsertAP_DETAIL(instance As AP_DETAIL)
    End Sub
    Partial Private Sub UpdateAP_DETAIL(instance As AP_DETAIL)
    End Sub
    Partial Private Sub DeleteAP_DETAIL(instance As AP_DETAIL)
    End Sub
    Partial Private Sub InsertAP_GOODS_RECEIVED(instance As AP_GOODS_RECEIVED)
    End Sub
    Partial Private Sub UpdateAP_GOODS_RECEIVED(instance As AP_GOODS_RECEIVED)
    End Sub
    Partial Private Sub DeleteAP_GOODS_RECEIVED(instance As AP_GOODS_RECEIVED)
    End Sub
    Partial Private Sub InsertAP_HEADER(instance As AP_HEADER)
    End Sub
    Partial Private Sub UpdateAP_HEADER(instance As AP_HEADER)
    End Sub
    Partial Private Sub DeleteAP_HEADER(instance As AP_HEADER)
    End Sub
    Partial Private Sub InsertAP_PO_LINE(instance As AP_PO_LINE)
    End Sub
    Partial Private Sub UpdateAP_PO_LINE(instance As AP_PO_LINE)
    End Sub
    Partial Private Sub DeleteAP_PO_LINE(instance As AP_PO_LINE)
    End Sub
    Partial Private Sub InsertDrawer(instance As Drawer)
    End Sub
    Partial Private Sub UpdateDrawer(instance As Drawer)
    End Sub
    Partial Private Sub DeleteDrawer(instance As Drawer)
    End Sub
    Partial Private Sub InsertCOST_CENTRE(instance As COST_CENTRE)
    End Sub
    Partial Private Sub UpdateCOST_CENTRE(instance As COST_CENTRE)
    End Sub
    Partial Private Sub DeleteCOST_CENTRE(instance As COST_CENTRE)
    End Sub
    Partial Private Sub InsertCOST_CENTRE_MEMBER(instance As COST_CENTRE_MEMBER)
    End Sub
    Partial Private Sub UpdateCOST_CENTRE_MEMBER(instance As COST_CENTRE_MEMBER)
    End Sub
    Partial Private Sub DeleteCOST_CENTRE_MEMBER(instance As COST_CENTRE_MEMBER)
    End Sub
    Partial Private Sub InsertAP_VAT_FILTER(instance As AP_VAT_FILTER)
    End Sub
    Partial Private Sub UpdateAP_VAT_FILTER(instance As AP_VAT_FILTER)
    End Sub
    Partial Private Sub DeleteAP_VAT_FILTER(instance As AP_VAT_FILTER)
    End Sub
    Partial Private Sub InsertAP_VAT_FILTER_CONDITION(instance As AP_VAT_FILTER_CONDITION)
    End Sub
    Partial Private Sub UpdateAP_VAT_FILTER_CONDITION(instance As AP_VAT_FILTER_CONDITION)
    End Sub
    Partial Private Sub DeleteAP_VAT_FILTER_CONDITION(instance As AP_VAT_FILTER_CONDITION)
    End Sub
    Partial Private Sub InsertAP_VAT_FILTER_CODE(instance As AP_VAT_FILTER_CODE)
    End Sub
    Partial Private Sub UpdateAP_VAT_FILTER_CODE(instance As AP_VAT_FILTER_CODE)
    End Sub
    Partial Private Sub DeleteAP_VAT_FILTER_CODE(instance As AP_VAT_FILTER_CODE)
    End Sub
    Partial Private Sub InsertAP_SKELETON_HEADER(instance As AP_SKELETON_HEADER)
    End Sub
    Partial Private Sub UpdateAP_SKELETON_HEADER(instance As AP_SKELETON_HEADER)
    End Sub
    Partial Private Sub DeleteAP_SKELETON_HEADER(instance As AP_SKELETON_HEADER)
    End Sub
    Partial Private Sub InsertAP_SKELETON_DETAIL(instance As AP_SKELETON_DETAIL)
    End Sub
    Partial Private Sub UpdateAP_SKELETON_DETAIL(instance As AP_SKELETON_DETAIL)
    End Sub
    Partial Private Sub DeleteAP_SKELETON_DETAIL(instance As AP_SKELETON_DETAIL)
    End Sub
    Partial Private Sub InsertAP_STATUS_UPDATE(instance As AP_STATUS_UPDATE)
    End Sub
    Partial Private Sub UpdateAP_STATUS_UPDATE(instance As AP_STATUS_UPDATE)
    End Sub
    Partial Private Sub DeleteAP_STATUS_UPDATE(instance As AP_STATUS_UPDATE)
    End Sub
    Partial Private Sub InsertDEPARTMENT(instance As DEPARTMENT)
    End Sub
    Partial Private Sub UpdateDEPARTMENT(instance As DEPARTMENT)
    End Sub
    Partial Private Sub DeleteDEPARTMENT(instance As DEPARTMENT)
    End Sub
    Partial Private Sub InsertDOC_APPROVAL(instance As DOC_APPROVAL)
    End Sub
    Partial Private Sub UpdateDOC_APPROVAL(instance As DOC_APPROVAL)
    End Sub
    Partial Private Sub DeleteDOC_APPROVAL(instance As DOC_APPROVAL)
    End Sub
    Partial Private Sub InsertDOC_APPROVER(instance As DOC_APPROVER)
    End Sub
    Partial Private Sub UpdateDOC_APPROVER(instance As DOC_APPROVER)
    End Sub
    Partial Private Sub DeleteDOC_APPROVER(instance As DOC_APPROVER)
    End Sub
    Partial Private Sub InsertVAT_CODE(instance As VAT_CODE)
    End Sub
    Partial Private Sub UpdateVAT_CODE(instance As VAT_CODE)
    End Sub
    Partial Private Sub DeleteVAT_CODE(instance As VAT_CODE)
    End Sub
    Partial Private Sub InsertTWK_Assembly(instance As TWK_Assembly)
    End Sub
    Partial Private Sub UpdateTWK_Assembly(instance As TWK_Assembly)
    End Sub
    Partial Private Sub DeleteTWK_Assembly(instance As TWK_Assembly)
    End Sub
    Partial Private Sub InsertTWK_RunProcedure(instance As TWK_RunProcedure)
    End Sub
    Partial Private Sub UpdateTWK_RunProcedure(instance As TWK_RunProcedure)
    End Sub
    Partial Private Sub DeleteTWK_RunProcedure(instance As TWK_RunProcedure)
    End Sub
    Partial Private Sub InsertAPPROVALS_STATUSNAME(instance As APPROVALS_STATUSNAME)
    End Sub
    Partial Private Sub UpdateAPPROVALS_STATUSNAME(instance As APPROVALS_STATUSNAME)
    End Sub
    Partial Private Sub DeleteAPPROVALS_STATUSNAME(instance As APPROVALS_STATUSNAME)
    End Sub
    Partial Private Sub InsertAPPROVALS_RQ(instance As APPROVALS_RQ)
    End Sub
    Partial Private Sub UpdateAPPROVALS_RQ(instance As APPROVALS_RQ)
    End Sub
    Partial Private Sub DeleteAPPROVALS_RQ(instance As APPROVALS_RQ)
    End Sub
    Partial Private Sub InsertAP_CHECK(instance As AP_CHECK)
    End Sub
    Partial Private Sub UpdateAP_CHECK(instance As AP_CHECK)
    End Sub
    Partial Private Sub DeleteAP_CHECK(instance As AP_CHECK)
    End Sub
    Partial Private Sub InsertAP_PPR_DETAIL(instance As AP_PPR_DETAIL)
    End Sub
    Partial Private Sub UpdateAP_PPR_DETAIL(instance As AP_PPR_DETAIL)
    End Sub
    Partial Private Sub DeleteAP_PPR_DETAIL(instance As AP_PPR_DETAIL)
    End Sub
    Partial Private Sub InsertAP_CCN_TRANSLATION(instance As AP_CCN_TRANSLATION)
    End Sub
    Partial Private Sub UpdateAP_CCN_TRANSLATION(instance As AP_CCN_TRANSLATION)
    End Sub
    Partial Private Sub DeleteAP_CCN_TRANSLATION(instance As AP_CCN_TRANSLATION)
    End Sub
    Partial Private Sub InsertAPPROVAL_LOA(instance As APPROVAL_LOA)
    End Sub
    Partial Private Sub UpdateAPPROVAL_LOA(instance As APPROVAL_LOA)
    End Sub
    Partial Private Sub DeleteAPPROVAL_LOA(instance As APPROVAL_LOA)
    End Sub
    Partial Private Sub InsertAP_PPR_HEADER(instance As AP_PPR_HEADER)
    End Sub
    Partial Private Sub UpdateAP_PPR_HEADER(instance As AP_PPR_HEADER)
    End Sub
    Partial Private Sub DeleteAP_PPR_HEADER(instance As AP_PPR_HEADER)
    End Sub
    Partial Private Sub InsertUDF4(instance As UDF4)
    End Sub
    Partial Private Sub UpdateUDF4(instance As UDF4)
    End Sub
    Partial Private Sub DeleteUDF4(instance As UDF4)
    End Sub
    Partial Private Sub InsertAP_SKELETON_CONDITION(instance As AP_SKELETON_CONDITION)
    End Sub
    Partial Private Sub UpdateAP_SKELETON_CONDITION(instance As AP_SKELETON_CONDITION)
    End Sub
    Partial Private Sub DeleteAP_SKELETON_CONDITION(instance As AP_SKELETON_CONDITION)
    End Sub
    Partial Private Sub InsertAP_PO_HEADER(instance As AP_PO_HEADER)
    End Sub
    Partial Private Sub UpdateAP_PO_HEADER(instance As AP_PO_HEADER)
    End Sub
    Partial Private Sub DeleteAP_PO_HEADER(instance As AP_PO_HEADER)
    End Sub
    Partial Private Sub InsertAP_MASTERLOCATION_DRAWER(instance As AP_MASTERLOCATION_DRAWER)
    End Sub
    Partial Private Sub UpdateAP_MASTERLOCATION_DRAWER(instance As AP_MASTERLOCATION_DRAWER)
    End Sub
    Partial Private Sub DeleteAP_MASTERLOCATION_DRAWER(instance As AP_MASTERLOCATION_DRAWER)
    End Sub
    Partial Private Sub InsertAP_PPR_APPROVAL(instance As AP_PPR_APPROVAL)
    End Sub
    Partial Private Sub UpdateAP_PPR_APPROVAL(instance As AP_PPR_APPROVAL)
    End Sub
    Partial Private Sub DeleteAP_PPR_APPROVAL(instance As AP_PPR_APPROVAL)
    End Sub
    Partial Private Sub InsertAP_SUPPLIER(instance As AP_SUPPLIER)
    End Sub
    Partial Private Sub UpdateAP_SUPPLIER(instance As AP_SUPPLIER)
    End Sub
    Partial Private Sub DeleteAP_SUPPLIER(instance As AP_SUPPLIER)
    End Sub
    Partial Private Sub InsertGL_CODE(instance As GL_CODE)
    End Sub
    Partial Private Sub UpdateGL_CODE(instance As GL_CODE)
    End Sub
    Partial Private Sub DeleteGL_CODE(instance As GL_CODE)
    End Sub
    Partial Private Sub InsertJE_APPROVAL(instance As JE_APPROVAL)
    End Sub
    Partial Private Sub UpdateJE_APPROVAL(instance As JE_APPROVAL)
    End Sub
    Partial Private Sub DeleteJE_APPROVAL(instance As JE_APPROVAL)
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New(Global.DLX_RR_DAL.My.MySettings.Default.DocumentManagerConnectionString, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public ReadOnly Property AP_DETAILs() As System.Data.Linq.Table(Of AP_DETAIL)
			Get
				Return Me.GetTable(Of AP_DETAIL)
			End Get
		End Property
		
		Public ReadOnly Property AP_GOODS_RECEIVEDs() As System.Data.Linq.Table(Of AP_GOODS_RECEIVED)
			Get
				Return Me.GetTable(Of AP_GOODS_RECEIVED)
			End Get
		End Property
		
		Public ReadOnly Property AP_HEADERs() As System.Data.Linq.Table(Of AP_HEADER)
			Get
				Return Me.GetTable(Of AP_HEADER)
			End Get
		End Property
		
		Public ReadOnly Property AP_PO_LINEs() As System.Data.Linq.Table(Of AP_PO_LINE)
			Get
				Return Me.GetTable(Of AP_PO_LINE)
			End Get
		End Property
		
		Public ReadOnly Property Drawers() As System.Data.Linq.Table(Of Drawer)
			Get
				Return Me.GetTable(Of Drawer)
			End Get
		End Property
		
		Public ReadOnly Property COST_CENTREs() As System.Data.Linq.Table(Of COST_CENTRE)
			Get
				Return Me.GetTable(Of COST_CENTRE)
			End Get
		End Property
		
		Public ReadOnly Property COST_CENTRE_MEMBERs() As System.Data.Linq.Table(Of COST_CENTRE_MEMBER)
			Get
				Return Me.GetTable(Of COST_CENTRE_MEMBER)
			End Get
		End Property
		
		Public ReadOnly Property AP_VAT_FILTERs() As System.Data.Linq.Table(Of AP_VAT_FILTER)
			Get
				Return Me.GetTable(Of AP_VAT_FILTER)
			End Get
		End Property
		
		Public ReadOnly Property AP_VAT_FILTER_CONDITIONs() As System.Data.Linq.Table(Of AP_VAT_FILTER_CONDITION)
			Get
				Return Me.GetTable(Of AP_VAT_FILTER_CONDITION)
			End Get
		End Property
		
		Public ReadOnly Property AP_VAT_FILTER_CODEs() As System.Data.Linq.Table(Of AP_VAT_FILTER_CODE)
			Get
				Return Me.GetTable(Of AP_VAT_FILTER_CODE)
			End Get
		End Property
		
		Public ReadOnly Property AP_SKELETON_HEADERs() As System.Data.Linq.Table(Of AP_SKELETON_HEADER)
			Get
				Return Me.GetTable(Of AP_SKELETON_HEADER)
			End Get
		End Property
		
		Public ReadOnly Property AP_SKELETON_DETAILs() As System.Data.Linq.Table(Of AP_SKELETON_DETAIL)
			Get
				Return Me.GetTable(Of AP_SKELETON_DETAIL)
			End Get
		End Property
		
		Public ReadOnly Property AP_STATUS_UPDATEs() As System.Data.Linq.Table(Of AP_STATUS_UPDATE)
			Get
				Return Me.GetTable(Of AP_STATUS_UPDATE)
			End Get
		End Property
		
		Public ReadOnly Property DEPARTMENTs() As System.Data.Linq.Table(Of DEPARTMENT)
			Get
				Return Me.GetTable(Of DEPARTMENT)
			End Get
		End Property
		
		Public ReadOnly Property DOC_APPROVALs() As System.Data.Linq.Table(Of DOC_APPROVAL)
			Get
				Return Me.GetTable(Of DOC_APPROVAL)
			End Get
		End Property
		
		Public ReadOnly Property DOC_APPROVERs() As System.Data.Linq.Table(Of DOC_APPROVER)
			Get
				Return Me.GetTable(Of DOC_APPROVER)
			End Get
		End Property
		
		Public ReadOnly Property VAT_CODEs() As System.Data.Linq.Table(Of VAT_CODE)
			Get
				Return Me.GetTable(Of VAT_CODE)
			End Get
		End Property
		
		Public ReadOnly Property TWK_Assemblies() As System.Data.Linq.Table(Of TWK_Assembly)
			Get
				Return Me.GetTable(Of TWK_Assembly)
			End Get
		End Property
		
		Public ReadOnly Property TWK_RunProcedures() As System.Data.Linq.Table(Of TWK_RunProcedure)
			Get
				Return Me.GetTable(Of TWK_RunProcedure)
			End Get
		End Property
		
		Public ReadOnly Property APPROVALS_STATUSNAMEs() As System.Data.Linq.Table(Of APPROVALS_STATUSNAME)
			Get
				Return Me.GetTable(Of APPROVALS_STATUSNAME)
			End Get
		End Property
		
		Public ReadOnly Property APPROVALS_RQs() As System.Data.Linq.Table(Of APPROVALS_RQ)
			Get
				Return Me.GetTable(Of APPROVALS_RQ)
			End Get
		End Property
		
		Public ReadOnly Property AP_CHECKs() As System.Data.Linq.Table(Of AP_CHECK)
			Get
				Return Me.GetTable(Of AP_CHECK)
			End Get
		End Property
		
		Public ReadOnly Property AP_PPR_DETAILs() As System.Data.Linq.Table(Of AP_PPR_DETAIL)
			Get
				Return Me.GetTable(Of AP_PPR_DETAIL)
			End Get
		End Property
		
		Public ReadOnly Property AP_CCN_TRANSLATIONs() As System.Data.Linq.Table(Of AP_CCN_TRANSLATION)
			Get
				Return Me.GetTable(Of AP_CCN_TRANSLATION)
			End Get
		End Property
		
		Public ReadOnly Property APPROVAL_LOAs() As System.Data.Linq.Table(Of APPROVAL_LOA)
			Get
				Return Me.GetTable(Of APPROVAL_LOA)
			End Get
		End Property
		
		Public ReadOnly Property AP_PPR_HEADERs() As System.Data.Linq.Table(Of AP_PPR_HEADER)
			Get
				Return Me.GetTable(Of AP_PPR_HEADER)
			End Get
		End Property
		
		Public ReadOnly Property UDF4s() As System.Data.Linq.Table(Of UDF4)
			Get
				Return Me.GetTable(Of UDF4)
			End Get
		End Property
		
		Public ReadOnly Property AP_SKELETON_CONDITIONs() As System.Data.Linq.Table(Of AP_SKELETON_CONDITION)
			Get
				Return Me.GetTable(Of AP_SKELETON_CONDITION)
			End Get
		End Property
		
		Public ReadOnly Property AP_PO_HEADERs() As System.Data.Linq.Table(Of AP_PO_HEADER)
			Get
				Return Me.GetTable(Of AP_PO_HEADER)
			End Get
		End Property
		
		Public ReadOnly Property AP_MASTERLOCATION_DRAWERs() As System.Data.Linq.Table(Of AP_MASTERLOCATION_DRAWER)
			Get
				Return Me.GetTable(Of AP_MASTERLOCATION_DRAWER)
			End Get
		End Property
		
		Public ReadOnly Property AP_PPR_APPROVALs() As System.Data.Linq.Table(Of AP_PPR_APPROVAL)
			Get
				Return Me.GetTable(Of AP_PPR_APPROVAL)
			End Get
		End Property
		
		Public ReadOnly Property AP_SUPPLIERs() As System.Data.Linq.Table(Of AP_SUPPLIER)
			Get
				Return Me.GetTable(Of AP_SUPPLIER)
			End Get
		End Property
		
		Public ReadOnly Property GL_CODEs() As System.Data.Linq.Table(Of GL_CODE)
			Get
				Return Me.GetTable(Of GL_CODE)
			End Get
		End Property
		
		Public ReadOnly Property JE_APPROVALs() As System.Data.Linq.Table(Of JE_APPROVAL)
			Get
				Return Me.GetTable(Of JE_APPROVAL)
			End Get
		End Property
		
		<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.Archive_GetFirstImagePath", IsComposable:=true)>  _
		Public Function Archive_GetFirstImagePath(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal docid As System.Nullable(Of Integer)) As String
			Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), docid).ReturnValue,String)
		End Function
		
		<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.Archive_GetFirstImagePath", IsComposable:=true)>  _
		Public Function Archive_GetFirstImagePath1(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal docid As System.Nullable(Of Integer)) As String
			Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), docid).ReturnValue,String)
		End Function
		
		<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DateFixToTok", IsComposable:=true)>  _
		Public Function DateFixToTok(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal orgDate As System.Nullable(Of Date)) As String
			Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), orgDate).ReturnValue,String)
		End Function
		
		<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.dlx_RR_GetImagePaths", IsComposable:=true)>  _
		Public Function dlx_RR_GetImagePaths(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal docid As System.Nullable(Of Integer)) As IQueryable(Of dlx_RR_GetImagePathsResult)
			Return Me.CreateMethodCallQuery(Of dlx_RR_GetImagePathsResult)(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), docid)
		End Function
		
		<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.fn_Split", IsComposable:=true)>  _
		Public Function fn_Split(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(8000)")> ByVal sText As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal sDelim As String) As IQueryable(Of fn_SplitResult)
			Return Me.CreateMethodCallQuery(Of fn_SplitResult)(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), sText, sDelim)
		End Function
		
		<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.tokDate2Date", IsComposable:=true)>  _
		Public Function tokDate2Date(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(24)")> ByVal tokDate As String) As System.Nullable(Of Date)
			Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), tokDate).ReturnValue,System.Nullable(Of Date))
		End Function
		
		<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.tokDateFix", IsComposable:=true)>  _
		Public Function tokDateFix(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(24)")> ByVal tokDate As String) As System.Nullable(Of Date)
			Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), tokDate).ReturnValue,System.Nullable(Of Date))
		End Function
		
		<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.dlx_RR_Resume_GetItem")>  _
		Public Function dlx_RR_Resume_GetItem(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="SSN", DbType:="VarChar(12)")> ByVal sSN As String) As ISingleResult(Of dlx_RR_Resume_GetItemResult)
			Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), sSN)
			Return CType(result.ReturnValue,ISingleResult(Of dlx_RR_Resume_GetItemResult))
		End Function
		
		<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.dlx_RR_RetentionRecord_Update", IsComposable:=true)>  _
		Public Function dlx_RR_RetentionRecord_Update(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal codedvalue As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal documenttype As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2)")> ByVal location As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal retdate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal vendornumber As String) As Object
			Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), codedvalue, documenttype, location, retdate, vendornumber).ReturnValue,Object)
		End Function
		
		<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.dlx_RR_Termination_Update")>  _
		Public Function dlx_RR_Termination_Update(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal empnumber As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(3)")> ByVal location As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(24)")> ByVal term_date As String) As Integer
			Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), empnumber, location, term_date)
			Return CType(result.ReturnValue,Integer)
		End Function
		
		<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.dlx_RR_Skeleton_CreateDummies")>  _
		Public Function dlx_RR_Skeleton_CreateDummies() As Integer
			Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
			Return CType(result.ReturnValue,Integer)
		End Function
		
		<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.dlx_RR_Skeleton_Remove")>  _
		Public Function dlx_RR_Skeleton_Remove(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ID", DbType:="VarChar(50)")> ByVal iD As String) As Integer
			Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), iD)
			Return CType(result.ReturnValue,Integer)
		End Function
		
		<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.dlx_RR_SpecialPricing")>  _
		Public Function dlx_RR_SpecialPricing() As ISingleResult(Of dlx_RR_SpecialPricingResult)
			Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
			Return CType(result.ReturnValue,ISingleResult(Of dlx_RR_SpecialPricingResult))
		End Function
		
		<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.dlx_RR_SpecialPricing_GetPendingACKs")>  _
		Public Function dlx_RR_SpecialPricing_GetPendingACKs() As ISingleResult(Of dlx_RR_SpecialPricing_GetPendingACKsResult)
			Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
			Return CType(result.ReturnValue,ISingleResult(Of dlx_RR_SpecialPricing_GetPendingACKsResult))
		End Function
		
		<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.dlx_RR_SpecialPricing_update_doc")>  _
		Public Function dlx_RR_SpecialPricing_update_doc(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal drawerid As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal docid As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal status As System.Nullable(Of Integer)) As Integer
			Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), drawerid, docid, status)
			Return CType(result.ReturnValue,Integer)
		End Function
		
		<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.dlx_RR_SpecialPricing_update_doc_processed")>  _
		Public Function dlx_RR_SpecialPricing_update_doc_processed(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal docid As System.Nullable(Of Integer)) As Integer
			Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), docid)
			Return CType(result.ReturnValue,Integer)
		End Function
		
		<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.dlx_RR_Resume_Delete_UDF")>  _
		Public Function dlx_RR_Resume_Delete_UDF(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal docid As System.Nullable(Of Integer)) As Integer
			Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), docid)
			Return CType(result.ReturnValue,Integer)
		End Function
		
		<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.dlx_RR_Resume_Delete_LAB")>  _
		Public Function dlx_RR_Resume_Delete_LAB(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="SSN", DbType:="VarChar(22)")> ByVal sSN As String) As Integer
			Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), sSN)
			Return CType(result.ReturnValue,Integer)
		End Function
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_DETAIL")>  _
	Partial Public Class AP_DETAIL
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _DetailId As System.Guid
		
		Private _HeaderId As System.Guid
		
		Private _InvLine As Integer
		
		Private _PONum As String
		
		Private _POLine As String
		
		Private _DelNote As String
		
		Private _ItemCode As String
		
		Private _Memo As String
		
		Private _Qty As Double
		
		Private _UnitPrice As Double
		
		Private _NetTotal As Double
		
		Private _VatTotal As Double
		
		Private _VatExempt As Boolean
		
		Private _VatCode As String
		
		Private _CostCentre As String
		
		Private _Dept As String
		
		Private _GLCode As String
		
		Private _Matched As Integer
		
		Private _ExcludeFromTotals As Boolean
		
		Private _Notes As String
		
		Private _AP_HEADER As EntityRef(Of AP_HEADER)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDetailIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnDetailIdChanged()
    End Sub
    Partial Private Sub OnHeaderIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnHeaderIdChanged()
    End Sub
    Partial Private Sub OnInvLineChanging(value As Integer)
    End Sub
    Partial Private Sub OnInvLineChanged()
    End Sub
    Partial Private Sub OnPONumChanging(value As String)
    End Sub
    Partial Private Sub OnPONumChanged()
    End Sub
    Partial Private Sub OnPOLineChanging(value As String)
    End Sub
    Partial Private Sub OnPOLineChanged()
    End Sub
    Partial Private Sub OnDelNoteChanging(value As String)
    End Sub
    Partial Private Sub OnDelNoteChanged()
    End Sub
    Partial Private Sub OnItemCodeChanging(value As String)
    End Sub
    Partial Private Sub OnItemCodeChanged()
    End Sub
    Partial Private Sub OnMemoChanging(value As String)
    End Sub
    Partial Private Sub OnMemoChanged()
    End Sub
    Partial Private Sub OnQtyChanging(value As Double)
    End Sub
    Partial Private Sub OnQtyChanged()
    End Sub
    Partial Private Sub OnUnitPriceChanging(value As Double)
    End Sub
    Partial Private Sub OnUnitPriceChanged()
    End Sub
    Partial Private Sub OnNetTotalChanging(value As Double)
    End Sub
    Partial Private Sub OnNetTotalChanged()
    End Sub
    Partial Private Sub OnVatTotalChanging(value As Double)
    End Sub
    Partial Private Sub OnVatTotalChanged()
    End Sub
    Partial Private Sub OnVatExemptChanging(value As Boolean)
    End Sub
    Partial Private Sub OnVatExemptChanged()
    End Sub
    Partial Private Sub OnVatCodeChanging(value As String)
    End Sub
    Partial Private Sub OnVatCodeChanged()
    End Sub
    Partial Private Sub OnCostCentreChanging(value As String)
    End Sub
    Partial Private Sub OnCostCentreChanged()
    End Sub
    Partial Private Sub OnDeptChanging(value As String)
    End Sub
    Partial Private Sub OnDeptChanged()
    End Sub
    Partial Private Sub OnGLCodeChanging(value As String)
    End Sub
    Partial Private Sub OnGLCodeChanged()
    End Sub
    Partial Private Sub OnMatchedChanging(value As Integer)
    End Sub
    Partial Private Sub OnMatchedChanged()
    End Sub
    Partial Private Sub OnExcludeFromTotalsChanging(value As Boolean)
    End Sub
    Partial Private Sub OnExcludeFromTotalsChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._AP_HEADER = CType(Nothing, EntityRef(Of AP_HEADER))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DetailId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
		Public Property DetailId() As System.Guid
			Get
				Return Me._DetailId
			End Get
			Set
				If ((Me._DetailId = value)  _
							= false) Then
					Me.OnDetailIdChanging(value)
					Me.SendPropertyChanging
					Me._DetailId = value
					Me.SendPropertyChanged("DetailId")
					Me.OnDetailIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HeaderId", DbType:="UniqueIdentifier NOT NULL")>  _
		Public Property HeaderId() As System.Guid
			Get
				Return Me._HeaderId
			End Get
			Set
				If ((Me._HeaderId = value)  _
							= false) Then
					If Me._AP_HEADER.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnHeaderIdChanging(value)
					Me.SendPropertyChanging
					Me._HeaderId = value
					Me.SendPropertyChanged("HeaderId")
					Me.OnHeaderIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvLine", DbType:="Int NOT NULL")>  _
		Public Property InvLine() As Integer
			Get
				Return Me._InvLine
			End Get
			Set
				If ((Me._InvLine = value)  _
							= false) Then
					Me.OnInvLineChanging(value)
					Me.SendPropertyChanging
					Me._InvLine = value
					Me.SendPropertyChanged("InvLine")
					Me.OnInvLineChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PONum", DbType:="NVarChar(20)")>  _
		Public Property PONum() As String
			Get
				Return Me._PONum
			End Get
			Set
				If (String.Equals(Me._PONum, value) = false) Then
					Me.OnPONumChanging(value)
					Me.SendPropertyChanging
					Me._PONum = value
					Me.SendPropertyChanged("PONum")
					Me.OnPONumChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_POLine", DbType:="NVarChar(10)")>  _
		Public Property POLine() As String
			Get
				Return Me._POLine
			End Get
			Set
				If (String.Equals(Me._POLine, value) = false) Then
					Me.OnPOLineChanging(value)
					Me.SendPropertyChanging
					Me._POLine = value
					Me.SendPropertyChanged("POLine")
					Me.OnPOLineChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DelNote", DbType:="NVarChar(20)")>  _
		Public Property DelNote() As String
			Get
				Return Me._DelNote
			End Get
			Set
				If (String.Equals(Me._DelNote, value) = false) Then
					Me.OnDelNoteChanging(value)
					Me.SendPropertyChanging
					Me._DelNote = value
					Me.SendPropertyChanged("DelNote")
					Me.OnDelNoteChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemCode", DbType:="NVarChar(30)")>  _
		Public Property ItemCode() As String
			Get
				Return Me._ItemCode
			End Get
			Set
				If (String.Equals(Me._ItemCode, value) = false) Then
					Me.OnItemCodeChanging(value)
					Me.SendPropertyChanging
					Me._ItemCode = value
					Me.SendPropertyChanged("ItemCode")
					Me.OnItemCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Memo", DbType:="NVarChar(50)")>  _
		Public Property Memo() As String
			Get
				Return Me._Memo
			End Get
			Set
				If (String.Equals(Me._Memo, value) = false) Then
					Me.OnMemoChanging(value)
					Me.SendPropertyChanging
					Me._Memo = value
					Me.SendPropertyChanged("Memo")
					Me.OnMemoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Qty", DbType:="Float NOT NULL")>  _
		Public Property Qty() As Double
			Get
				Return Me._Qty
			End Get
			Set
				If ((Me._Qty = value)  _
							= false) Then
					Me.OnQtyChanging(value)
					Me.SendPropertyChanging
					Me._Qty = value
					Me.SendPropertyChanged("Qty")
					Me.OnQtyChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitPrice", DbType:="Float NOT NULL")>  _
		Public Property UnitPrice() As Double
			Get
				Return Me._UnitPrice
			End Get
			Set
				If ((Me._UnitPrice = value)  _
							= false) Then
					Me.OnUnitPriceChanging(value)
					Me.SendPropertyChanging
					Me._UnitPrice = value
					Me.SendPropertyChanged("UnitPrice")
					Me.OnUnitPriceChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NetTotal", DbType:="Float NOT NULL")>  _
		Public Property NetTotal() As Double
			Get
				Return Me._NetTotal
			End Get
			Set
				If ((Me._NetTotal = value)  _
							= false) Then
					Me.OnNetTotalChanging(value)
					Me.SendPropertyChanging
					Me._NetTotal = value
					Me.SendPropertyChanged("NetTotal")
					Me.OnNetTotalChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VatTotal", DbType:="Float NOT NULL")>  _
		Public Property VatTotal() As Double
			Get
				Return Me._VatTotal
			End Get
			Set
				If ((Me._VatTotal = value)  _
							= false) Then
					Me.OnVatTotalChanging(value)
					Me.SendPropertyChanging
					Me._VatTotal = value
					Me.SendPropertyChanged("VatTotal")
					Me.OnVatTotalChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VatExempt", DbType:="Bit NOT NULL")>  _
		Public Property VatExempt() As Boolean
			Get
				Return Me._VatExempt
			End Get
			Set
				If ((Me._VatExempt = value)  _
							= false) Then
					Me.OnVatExemptChanging(value)
					Me.SendPropertyChanging
					Me._VatExempt = value
					Me.SendPropertyChanged("VatExempt")
					Me.OnVatExemptChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VatCode", DbType:="NVarChar(5)")>  _
		Public Property VatCode() As String
			Get
				Return Me._VatCode
			End Get
			Set
				If (String.Equals(Me._VatCode, value) = false) Then
					Me.OnVatCodeChanging(value)
					Me.SendPropertyChanging
					Me._VatCode = value
					Me.SendPropertyChanged("VatCode")
					Me.OnVatCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CostCentre", DbType:="NVarChar(20)")>  _
		Public Property CostCentre() As String
			Get
				Return Me._CostCentre
			End Get
			Set
				If (String.Equals(Me._CostCentre, value) = false) Then
					Me.OnCostCentreChanging(value)
					Me.SendPropertyChanging
					Me._CostCentre = value
					Me.SendPropertyChanged("CostCentre")
					Me.OnCostCentreChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dept", DbType:="NVarChar(20)")>  _
		Public Property Dept() As String
			Get
				Return Me._Dept
			End Get
			Set
				If (String.Equals(Me._Dept, value) = false) Then
					Me.OnDeptChanging(value)
					Me.SendPropertyChanging
					Me._Dept = value
					Me.SendPropertyChanged("Dept")
					Me.OnDeptChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GLCode", DbType:="NVarChar(20)")>  _
		Public Property GLCode() As String
			Get
				Return Me._GLCode
			End Get
			Set
				If (String.Equals(Me._GLCode, value) = false) Then
					Me.OnGLCodeChanging(value)
					Me.SendPropertyChanging
					Me._GLCode = value
					Me.SendPropertyChanged("GLCode")
					Me.OnGLCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Matched", DbType:="Int NOT NULL")>  _
		Public Property Matched() As Integer
			Get
				Return Me._Matched
			End Get
			Set
				If ((Me._Matched = value)  _
							= false) Then
					Me.OnMatchedChanging(value)
					Me.SendPropertyChanging
					Me._Matched = value
					Me.SendPropertyChanged("Matched")
					Me.OnMatchedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExcludeFromTotals", DbType:="Bit NOT NULL")>  _
		Public Property ExcludeFromTotals() As Boolean
			Get
				Return Me._ExcludeFromTotals
			End Get
			Set
				If ((Me._ExcludeFromTotals = value)  _
							= false) Then
					Me.OnExcludeFromTotalsChanging(value)
					Me.SendPropertyChanging
					Me._ExcludeFromTotals = value
					Me.SendPropertyChanged("ExcludeFromTotals")
					Me.OnExcludeFromTotalsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="NVarChar(39)")>  _
		Public Property Notes() As String
			Get
				Return Me._Notes
			End Get
			Set
				If (String.Equals(Me._Notes, value) = false) Then
					Me.OnNotesChanging(value)
					Me.SendPropertyChanging
					Me._Notes = value
					Me.SendPropertyChanged("Notes")
					Me.OnNotesChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_HEADER_AP_DETAIL", Storage:="_AP_HEADER", ThisKey:="HeaderId", OtherKey:="HeaderId", IsForeignKey:=true)>  _
		Public Property AP_HEADER() As AP_HEADER
			Get
				Return Me._AP_HEADER.Entity
			End Get
			Set
				Dim previousValue As AP_HEADER = Me._AP_HEADER.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._AP_HEADER.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._AP_HEADER.Entity = Nothing
						previousValue.AP_DETAILs.Remove(Me)
					End If
					Me._AP_HEADER.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.AP_DETAILs.Add(Me)
						Me._HeaderId = value.HeaderId
					Else
						Me._HeaderId = CType(Nothing, System.Guid)
					End If
					Me.SendPropertyChanged("AP_HEADER")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_GOODS_RECEIVED")>  _
	Partial Public Class AP_GOODS_RECEIVED
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ERPSystem As String
		
		Private _CompanyCode As String
		
		Private _ClientCode As String
		
		Private _Location As String
		
		Private _Receiver As String
		
		Private _DeliveryNoteNum As String
		
		Private _DeliveryNoteLineNum As Integer
		
		Private _ItemCode As String
		
		Private _SupplierId As String
		
		Private _PONumber As String
		
		Private _POLineNum As System.Nullable(Of Integer)
		
		Private _Outstanding As Double
		
		Private _RemovedFromSource As Boolean
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnERPSystemChanging(value As String)
    End Sub
    Partial Private Sub OnERPSystemChanged()
    End Sub
    Partial Private Sub OnCompanyCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCompanyCodeChanged()
    End Sub
    Partial Private Sub OnClientCodeChanging(value As String)
    End Sub
    Partial Private Sub OnClientCodeChanged()
    End Sub
    Partial Private Sub OnLocationChanging(value As String)
    End Sub
    Partial Private Sub OnLocationChanged()
    End Sub
    Partial Private Sub OnReceiverChanging(value As String)
    End Sub
    Partial Private Sub OnReceiverChanged()
    End Sub
    Partial Private Sub OnDeliveryNoteNumChanging(value As String)
    End Sub
    Partial Private Sub OnDeliveryNoteNumChanged()
    End Sub
    Partial Private Sub OnDeliveryNoteLineNumChanging(value As Integer)
    End Sub
    Partial Private Sub OnDeliveryNoteLineNumChanged()
    End Sub
    Partial Private Sub OnItemCodeChanging(value As String)
    End Sub
    Partial Private Sub OnItemCodeChanged()
    End Sub
    Partial Private Sub OnSupplierIdChanging(value As String)
    End Sub
    Partial Private Sub OnSupplierIdChanged()
    End Sub
    Partial Private Sub OnPONumberChanging(value As String)
    End Sub
    Partial Private Sub OnPONumberChanged()
    End Sub
    Partial Private Sub OnPOLineNumChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPOLineNumChanged()
    End Sub
    Partial Private Sub OnOutstandingChanging(value As Double)
    End Sub
    Partial Private Sub OnOutstandingChanged()
    End Sub
    Partial Private Sub OnRemovedFromSourceChanging(value As Boolean)
    End Sub
    Partial Private Sub OnRemovedFromSourceChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ERPSystem", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property ERPSystem() As String
			Get
				Return Me._ERPSystem
			End Get
			Set
				If (String.Equals(Me._ERPSystem, value) = false) Then
					Me.OnERPSystemChanging(value)
					Me.SendPropertyChanging
					Me._ERPSystem = value
					Me.SendPropertyChanged("ERPSystem")
					Me.OnERPSystemChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyCode", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property CompanyCode() As String
			Get
				Return Me._CompanyCode
			End Get
			Set
				If (String.Equals(Me._CompanyCode, value) = false) Then
					Me.OnCompanyCodeChanging(value)
					Me.SendPropertyChanging
					Me._CompanyCode = value
					Me.SendPropertyChanged("CompanyCode")
					Me.OnCompanyCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientCode", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property ClientCode() As String
			Get
				Return Me._ClientCode
			End Get
			Set
				If (String.Equals(Me._ClientCode, value) = false) Then
					Me.OnClientCodeChanging(value)
					Me.SendPropertyChanging
					Me._ClientCode = value
					Me.SendPropertyChanged("ClientCode")
					Me.OnClientCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Location", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property Location() As String
			Get
				Return Me._Location
			End Get
			Set
				If (String.Equals(Me._Location, value) = false) Then
					Me.OnLocationChanging(value)
					Me.SendPropertyChanging
					Me._Location = value
					Me.SendPropertyChanged("Location")
					Me.OnLocationChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Receiver", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property Receiver() As String
			Get
				Return Me._Receiver
			End Get
			Set
				If (String.Equals(Me._Receiver, value) = false) Then
					Me.OnReceiverChanging(value)
					Me.SendPropertyChanging
					Me._Receiver = value
					Me.SendPropertyChanged("Receiver")
					Me.OnReceiverChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeliveryNoteNum", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property DeliveryNoteNum() As String
			Get
				Return Me._DeliveryNoteNum
			End Get
			Set
				If (String.Equals(Me._DeliveryNoteNum, value) = false) Then
					Me.OnDeliveryNoteNumChanging(value)
					Me.SendPropertyChanging
					Me._DeliveryNoteNum = value
					Me.SendPropertyChanged("DeliveryNoteNum")
					Me.OnDeliveryNoteNumChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeliveryNoteLineNum", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property DeliveryNoteLineNum() As Integer
			Get
				Return Me._DeliveryNoteLineNum
			End Get
			Set
				If ((Me._DeliveryNoteLineNum = value)  _
							= false) Then
					Me.OnDeliveryNoteLineNumChanging(value)
					Me.SendPropertyChanging
					Me._DeliveryNoteLineNum = value
					Me.SendPropertyChanged("DeliveryNoteLineNum")
					Me.OnDeliveryNoteLineNumChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemCode", DbType:="NVarChar(30)")>  _
		Public Property ItemCode() As String
			Get
				Return Me._ItemCode
			End Get
			Set
				If (String.Equals(Me._ItemCode, value) = false) Then
					Me.OnItemCodeChanging(value)
					Me.SendPropertyChanging
					Me._ItemCode = value
					Me.SendPropertyChanged("ItemCode")
					Me.OnItemCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierId", DbType:="NVarChar(20)")>  _
		Public Property SupplierId() As String
			Get
				Return Me._SupplierId
			End Get
			Set
				If (String.Equals(Me._SupplierId, value) = false) Then
					Me.OnSupplierIdChanging(value)
					Me.SendPropertyChanging
					Me._SupplierId = value
					Me.SendPropertyChanged("SupplierId")
					Me.OnSupplierIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PONumber", DbType:="NVarChar(50)")>  _
		Public Property PONumber() As String
			Get
				Return Me._PONumber
			End Get
			Set
				If (String.Equals(Me._PONumber, value) = false) Then
					Me.OnPONumberChanging(value)
					Me.SendPropertyChanging
					Me._PONumber = value
					Me.SendPropertyChanged("PONumber")
					Me.OnPONumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_POLineNum", DbType:="Int")>  _
		Public Property POLineNum() As System.Nullable(Of Integer)
			Get
				Return Me._POLineNum
			End Get
			Set
				If (Me._POLineNum.Equals(value) = false) Then
					Me.OnPOLineNumChanging(value)
					Me.SendPropertyChanging
					Me._POLineNum = value
					Me.SendPropertyChanged("POLineNum")
					Me.OnPOLineNumChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Outstanding", DbType:="Float NOT NULL")>  _
		Public Property Outstanding() As Double
			Get
				Return Me._Outstanding
			End Get
			Set
				If ((Me._Outstanding = value)  _
							= false) Then
					Me.OnOutstandingChanging(value)
					Me.SendPropertyChanging
					Me._Outstanding = value
					Me.SendPropertyChanged("Outstanding")
					Me.OnOutstandingChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RemovedFromSource", DbType:="Bit NOT NULL")>  _
		Public Property RemovedFromSource() As Boolean
			Get
				Return Me._RemovedFromSource
			End Get
			Set
				If ((Me._RemovedFromSource = value)  _
							= false) Then
					Me.OnRemovedFromSourceChanging(value)
					Me.SendPropertyChanging
					Me._RemovedFromSource = value
					Me.SendPropertyChanged("RemovedFromSource")
					Me.OnRemovedFromSourceChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_HEADER")>  _
	Partial Public Class AP_HEADER
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _HeaderId As System.Guid
		
		Private _DrawerId As Integer
		
		Private _DocId As Integer
		
		Private _ERPSystem As String
		
		Private _CompanyCode As String
		
		Private _ClientCode As String
		
		Private _SupplierId As String
		
		Private _SupplierName As String
		
		Private _APDocType As String
		
		Private _InvoiceNo As String
		
		Private _TaxDate As Date
		
		Private _GrossAmount As Double
		
		Private _TaxAmount As Double
		
		Private _Currency As String
		
		Private _TransType As String
		
		Private _ERP_Ref As String
		
		Private _Matched As Integer
		
		Private _Posted As Boolean
		
		Private _WFStatus As System.Nullable(Of Integer)
		
		Private _ExportStatus As Integer
		
		Private _ExportResult As String
		
		Private _ValidationOverridden As System.Nullable(Of Boolean)
		
		Private _SignedOff As System.Nullable(Of Double)
		
		Private _ReasonId As System.Nullable(Of Integer)
		
		Private _ReasonMessage As String
		
		Private _LoadedFromSkeleton As Boolean
		
		Private _AP_DETAILs As EntitySet(Of AP_DETAIL)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnHeaderIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnHeaderIdChanged()
    End Sub
    Partial Private Sub OnDrawerIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDrawerIdChanged()
    End Sub
    Partial Private Sub OnDocIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDocIdChanged()
    End Sub
    Partial Private Sub OnERPSystemChanging(value As String)
    End Sub
    Partial Private Sub OnERPSystemChanged()
    End Sub
    Partial Private Sub OnCompanyCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCompanyCodeChanged()
    End Sub
    Partial Private Sub OnClientCodeChanging(value As String)
    End Sub
    Partial Private Sub OnClientCodeChanged()
    End Sub
    Partial Private Sub OnSupplierIdChanging(value As String)
    End Sub
    Partial Private Sub OnSupplierIdChanged()
    End Sub
    Partial Private Sub OnSupplierNameChanging(value As String)
    End Sub
    Partial Private Sub OnSupplierNameChanged()
    End Sub
    Partial Private Sub OnAPDocTypeChanging(value As String)
    End Sub
    Partial Private Sub OnAPDocTypeChanged()
    End Sub
    Partial Private Sub OnInvoiceNoChanging(value As String)
    End Sub
    Partial Private Sub OnInvoiceNoChanged()
    End Sub
    Partial Private Sub OnTaxDateChanging(value As Date)
    End Sub
    Partial Private Sub OnTaxDateChanged()
    End Sub
    Partial Private Sub OnGrossAmountChanging(value As Double)
    End Sub
    Partial Private Sub OnGrossAmountChanged()
    End Sub
    Partial Private Sub OnTaxAmountChanging(value As Double)
    End Sub
    Partial Private Sub OnTaxAmountChanged()
    End Sub
    Partial Private Sub OnCurrencyChanging(value As String)
    End Sub
    Partial Private Sub OnCurrencyChanged()
    End Sub
    Partial Private Sub OnTransTypeChanging(value As String)
    End Sub
    Partial Private Sub OnTransTypeChanged()
    End Sub
    Partial Private Sub OnERP_RefChanging(value As String)
    End Sub
    Partial Private Sub OnERP_RefChanged()
    End Sub
    Partial Private Sub OnMatchedChanging(value As Integer)
    End Sub
    Partial Private Sub OnMatchedChanged()
    End Sub
    Partial Private Sub OnPostedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPostedChanged()
    End Sub
    Partial Private Sub OnWFStatusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnWFStatusChanged()
    End Sub
    Partial Private Sub OnExportStatusChanging(value As Integer)
    End Sub
    Partial Private Sub OnExportStatusChanged()
    End Sub
    Partial Private Sub OnExportResultChanging(value As String)
    End Sub
    Partial Private Sub OnExportResultChanged()
    End Sub
    Partial Private Sub OnValidationOverriddenChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnValidationOverriddenChanged()
    End Sub
    Partial Private Sub OnSignedOffChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnSignedOffChanged()
    End Sub
    Partial Private Sub OnReasonIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnReasonIdChanged()
    End Sub
    Partial Private Sub OnReasonMessageChanging(value As String)
    End Sub
    Partial Private Sub OnReasonMessageChanged()
    End Sub
    Partial Private Sub OnLoadedFromSkeletonChanging(value As Boolean)
    End Sub
    Partial Private Sub OnLoadedFromSkeletonChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._AP_DETAILs = New EntitySet(Of AP_DETAIL)(AddressOf Me.attach_AP_DETAILs, AddressOf Me.detach_AP_DETAILs)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HeaderId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
		Public Property HeaderId() As System.Guid
			Get
				Return Me._HeaderId
			End Get
			Set
				If ((Me._HeaderId = value)  _
							= false) Then
					Me.OnHeaderIdChanging(value)
					Me.SendPropertyChanging
					Me._HeaderId = value
					Me.SendPropertyChanged("HeaderId")
					Me.OnHeaderIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DrawerId", DbType:="Int NOT NULL")>  _
		Public Property DrawerId() As Integer
			Get
				Return Me._DrawerId
			End Get
			Set
				If ((Me._DrawerId = value)  _
							= false) Then
					Me.OnDrawerIdChanging(value)
					Me.SendPropertyChanging
					Me._DrawerId = value
					Me.SendPropertyChanged("DrawerId")
					Me.OnDrawerIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocId", DbType:="Int NOT NULL")>  _
		Public Property DocId() As Integer
			Get
				Return Me._DocId
			End Get
			Set
				If ((Me._DocId = value)  _
							= false) Then
					Me.OnDocIdChanging(value)
					Me.SendPropertyChanging
					Me._DocId = value
					Me.SendPropertyChanged("DocId")
					Me.OnDocIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ERPSystem", DbType:="NVarChar(20)")>  _
		Public Property ERPSystem() As String
			Get
				Return Me._ERPSystem
			End Get
			Set
				If (String.Equals(Me._ERPSystem, value) = false) Then
					Me.OnERPSystemChanging(value)
					Me.SendPropertyChanging
					Me._ERPSystem = value
					Me.SendPropertyChanged("ERPSystem")
					Me.OnERPSystemChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyCode", DbType:="NVarChar(20)")>  _
		Public Property CompanyCode() As String
			Get
				Return Me._CompanyCode
			End Get
			Set
				If (String.Equals(Me._CompanyCode, value) = false) Then
					Me.OnCompanyCodeChanging(value)
					Me.SendPropertyChanging
					Me._CompanyCode = value
					Me.SendPropertyChanged("CompanyCode")
					Me.OnCompanyCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientCode", DbType:="NVarChar(20)")>  _
		Public Property ClientCode() As String
			Get
				Return Me._ClientCode
			End Get
			Set
				If (String.Equals(Me._ClientCode, value) = false) Then
					Me.OnClientCodeChanging(value)
					Me.SendPropertyChanging
					Me._ClientCode = value
					Me.SendPropertyChanged("ClientCode")
					Me.OnClientCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierId", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property SupplierId() As String
			Get
				Return Me._SupplierId
			End Get
			Set
				If (String.Equals(Me._SupplierId, value) = false) Then
					Me.OnSupplierIdChanging(value)
					Me.SendPropertyChanging
					Me._SupplierId = value
					Me.SendPropertyChanged("SupplierId")
					Me.OnSupplierIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierName", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property SupplierName() As String
			Get
				Return Me._SupplierName
			End Get
			Set
				If (String.Equals(Me._SupplierName, value) = false) Then
					Me.OnSupplierNameChanging(value)
					Me.SendPropertyChanging
					Me._SupplierName = value
					Me.SendPropertyChanged("SupplierName")
					Me.OnSupplierNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_APDocType", DbType:="VarChar(4) NOT NULL", CanBeNull:=false)>  _
		Public Property APDocType() As String
			Get
				Return Me._APDocType
			End Get
			Set
				If (String.Equals(Me._APDocType, value) = false) Then
					Me.OnAPDocTypeChanging(value)
					Me.SendPropertyChanging
					Me._APDocType = value
					Me.SendPropertyChanged("APDocType")
					Me.OnAPDocTypeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceNo", DbType:="NVarChar(30) NOT NULL", CanBeNull:=false)>  _
		Public Property InvoiceNo() As String
			Get
				Return Me._InvoiceNo
			End Get
			Set
				If (String.Equals(Me._InvoiceNo, value) = false) Then
					Me.OnInvoiceNoChanging(value)
					Me.SendPropertyChanging
					Me._InvoiceNo = value
					Me.SendPropertyChanged("InvoiceNo")
					Me.OnInvoiceNoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TaxDate", DbType:="DateTime NOT NULL")>  _
		Public Property TaxDate() As Date
			Get
				Return Me._TaxDate
			End Get
			Set
				If ((Me._TaxDate = value)  _
							= false) Then
					Me.OnTaxDateChanging(value)
					Me.SendPropertyChanging
					Me._TaxDate = value
					Me.SendPropertyChanged("TaxDate")
					Me.OnTaxDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GrossAmount", DbType:="Float NOT NULL")>  _
		Public Property GrossAmount() As Double
			Get
				Return Me._GrossAmount
			End Get
			Set
				If ((Me._GrossAmount = value)  _
							= false) Then
					Me.OnGrossAmountChanging(value)
					Me.SendPropertyChanging
					Me._GrossAmount = value
					Me.SendPropertyChanged("GrossAmount")
					Me.OnGrossAmountChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TaxAmount", DbType:="Float NOT NULL")>  _
		Public Property TaxAmount() As Double
			Get
				Return Me._TaxAmount
			End Get
			Set
				If ((Me._TaxAmount = value)  _
							= false) Then
					Me.OnTaxAmountChanging(value)
					Me.SendPropertyChanging
					Me._TaxAmount = value
					Me.SendPropertyChanged("TaxAmount")
					Me.OnTaxAmountChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Currency", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
		Public Property Currency() As String
			Get
				Return Me._Currency
			End Get
			Set
				If (String.Equals(Me._Currency, value) = false) Then
					Me.OnCurrencyChanging(value)
					Me.SendPropertyChanging
					Me._Currency = value
					Me.SendPropertyChanged("Currency")
					Me.OnCurrencyChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransType", DbType:="VarChar(2) NOT NULL", CanBeNull:=false)>  _
		Public Property TransType() As String
			Get
				Return Me._TransType
			End Get
			Set
				If (String.Equals(Me._TransType, value) = false) Then
					Me.OnTransTypeChanging(value)
					Me.SendPropertyChanging
					Me._TransType = value
					Me.SendPropertyChanged("TransType")
					Me.OnTransTypeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ERP_Ref", DbType:="NVarChar(30)")>  _
		Public Property ERP_Ref() As String
			Get
				Return Me._ERP_Ref
			End Get
			Set
				If (String.Equals(Me._ERP_Ref, value) = false) Then
					Me.OnERP_RefChanging(value)
					Me.SendPropertyChanging
					Me._ERP_Ref = value
					Me.SendPropertyChanged("ERP_Ref")
					Me.OnERP_RefChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Matched", DbType:="Int NOT NULL")>  _
		Public Property Matched() As Integer
			Get
				Return Me._Matched
			End Get
			Set
				If ((Me._Matched = value)  _
							= false) Then
					Me.OnMatchedChanging(value)
					Me.SendPropertyChanging
					Me._Matched = value
					Me.SendPropertyChanged("Matched")
					Me.OnMatchedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Posted", DbType:="Bit NOT NULL")>  _
		Public Property Posted() As Boolean
			Get
				Return Me._Posted
			End Get
			Set
				If ((Me._Posted = value)  _
							= false) Then
					Me.OnPostedChanging(value)
					Me.SendPropertyChanging
					Me._Posted = value
					Me.SendPropertyChanged("Posted")
					Me.OnPostedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WFStatus", DbType:="Int")>  _
		Public Property WFStatus() As System.Nullable(Of Integer)
			Get
				Return Me._WFStatus
			End Get
			Set
				If (Me._WFStatus.Equals(value) = false) Then
					Me.OnWFStatusChanging(value)
					Me.SendPropertyChanging
					Me._WFStatus = value
					Me.SendPropertyChanged("WFStatus")
					Me.OnWFStatusChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExportStatus", DbType:="Int NOT NULL")>  _
		Public Property ExportStatus() As Integer
			Get
				Return Me._ExportStatus
			End Get
			Set
				If ((Me._ExportStatus = value)  _
							= false) Then
					Me.OnExportStatusChanging(value)
					Me.SendPropertyChanging
					Me._ExportStatus = value
					Me.SendPropertyChanged("ExportStatus")
					Me.OnExportStatusChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExportResult", DbType:="NVarChar(255)")>  _
		Public Property ExportResult() As String
			Get
				Return Me._ExportResult
			End Get
			Set
				If (String.Equals(Me._ExportResult, value) = false) Then
					Me.OnExportResultChanging(value)
					Me.SendPropertyChanging
					Me._ExportResult = value
					Me.SendPropertyChanged("ExportResult")
					Me.OnExportResultChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ValidationOverridden", DbType:="Bit")>  _
		Public Property ValidationOverridden() As System.Nullable(Of Boolean)
			Get
				Return Me._ValidationOverridden
			End Get
			Set
				If (Me._ValidationOverridden.Equals(value) = false) Then
					Me.OnValidationOverriddenChanging(value)
					Me.SendPropertyChanging
					Me._ValidationOverridden = value
					Me.SendPropertyChanged("ValidationOverridden")
					Me.OnValidationOverriddenChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SignedOff", DbType:="Float")>  _
		Public Property SignedOff() As System.Nullable(Of Double)
			Get
				Return Me._SignedOff
			End Get
			Set
				If (Me._SignedOff.Equals(value) = false) Then
					Me.OnSignedOffChanging(value)
					Me.SendPropertyChanging
					Me._SignedOff = value
					Me.SendPropertyChanged("SignedOff")
					Me.OnSignedOffChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReasonId", DbType:="Int")>  _
		Public Property ReasonId() As System.Nullable(Of Integer)
			Get
				Return Me._ReasonId
			End Get
			Set
				If (Me._ReasonId.Equals(value) = false) Then
					Me.OnReasonIdChanging(value)
					Me.SendPropertyChanging
					Me._ReasonId = value
					Me.SendPropertyChanged("ReasonId")
					Me.OnReasonIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReasonMessage", DbType:="NVarChar(1000)")>  _
		Public Property ReasonMessage() As String
			Get
				Return Me._ReasonMessage
			End Get
			Set
				If (String.Equals(Me._ReasonMessage, value) = false) Then
					Me.OnReasonMessageChanging(value)
					Me.SendPropertyChanging
					Me._ReasonMessage = value
					Me.SendPropertyChanged("ReasonMessage")
					Me.OnReasonMessageChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoadedFromSkeleton", DbType:="Bit NOT NULL")>  _
		Public Property LoadedFromSkeleton() As Boolean
			Get
				Return Me._LoadedFromSkeleton
			End Get
			Set
				If ((Me._LoadedFromSkeleton = value)  _
							= false) Then
					Me.OnLoadedFromSkeletonChanging(value)
					Me.SendPropertyChanging
					Me._LoadedFromSkeleton = value
					Me.SendPropertyChanged("LoadedFromSkeleton")
					Me.OnLoadedFromSkeletonChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_HEADER_AP_DETAIL", Storage:="_AP_DETAILs", ThisKey:="HeaderId", OtherKey:="HeaderId")>  _
		Public Property AP_DETAILs() As EntitySet(Of AP_DETAIL)
			Get
				Return Me._AP_DETAILs
			End Get
			Set
				Me._AP_DETAILs.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_AP_DETAILs(ByVal entity As AP_DETAIL)
			Me.SendPropertyChanging
			entity.AP_HEADER = Me
		End Sub
		
		Private Sub detach_AP_DETAILs(ByVal entity As AP_DETAIL)
			Me.SendPropertyChanging
			entity.AP_HEADER = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_PO_LINE")>  _
	Partial Public Class AP_PO_LINE
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ERPSystem As String
		
		Private _CompanyCode As String
		
		Private _ClientCode As String
		
		Private _PONumber As String
		
		Private _SupplierId As String
		
		Private _POLineNum As Integer
		
		Private _ItemCode As String
		
		Private _Descr As String
		
		Private _Qty As System.Nullable(Of Double)
		
		Private _UnitPrice As System.Nullable(Of Double)
		
		Private _UoM As String
		
		Private _NetTotal As Double
		
		Private _TaxTotal As Double
		
		Private _VatCode As String
		
		Private _CostCentre As String
		
		Private _Dept As String
		
		Private _GLCode As String
		
		Private _Requisitioner As String
		
		Private _Planner As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnERPSystemChanging(value As String)
    End Sub
    Partial Private Sub OnERPSystemChanged()
    End Sub
    Partial Private Sub OnCompanyCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCompanyCodeChanged()
    End Sub
    Partial Private Sub OnClientCodeChanging(value As String)
    End Sub
    Partial Private Sub OnClientCodeChanged()
    End Sub
    Partial Private Sub OnPONumberChanging(value As String)
    End Sub
    Partial Private Sub OnPONumberChanged()
    End Sub
    Partial Private Sub OnSupplierIdChanging(value As String)
    End Sub
    Partial Private Sub OnSupplierIdChanged()
    End Sub
    Partial Private Sub OnPOLineNumChanging(value As Integer)
    End Sub
    Partial Private Sub OnPOLineNumChanged()
    End Sub
    Partial Private Sub OnItemCodeChanging(value As String)
    End Sub
    Partial Private Sub OnItemCodeChanged()
    End Sub
    Partial Private Sub OnDescrChanging(value As String)
    End Sub
    Partial Private Sub OnDescrChanged()
    End Sub
    Partial Private Sub OnQtyChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnQtyChanged()
    End Sub
    Partial Private Sub OnUnitPriceChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnUnitPriceChanged()
    End Sub
    Partial Private Sub OnUoMChanging(value As String)
    End Sub
    Partial Private Sub OnUoMChanged()
    End Sub
    Partial Private Sub OnNetTotalChanging(value As Double)
    End Sub
    Partial Private Sub OnNetTotalChanged()
    End Sub
    Partial Private Sub OnTaxTotalChanging(value As Double)
    End Sub
    Partial Private Sub OnTaxTotalChanged()
    End Sub
    Partial Private Sub OnVatCodeChanging(value As String)
    End Sub
    Partial Private Sub OnVatCodeChanged()
    End Sub
    Partial Private Sub OnCostCentreChanging(value As String)
    End Sub
    Partial Private Sub OnCostCentreChanged()
    End Sub
    Partial Private Sub OnDeptChanging(value As String)
    End Sub
    Partial Private Sub OnDeptChanged()
    End Sub
    Partial Private Sub OnGLCodeChanging(value As String)
    End Sub
    Partial Private Sub OnGLCodeChanged()
    End Sub
    Partial Private Sub OnRequisitionerChanging(value As String)
    End Sub
    Partial Private Sub OnRequisitionerChanged()
    End Sub
    Partial Private Sub OnPlannerChanging(value As String)
    End Sub
    Partial Private Sub OnPlannerChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ERPSystem", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property ERPSystem() As String
			Get
				Return Me._ERPSystem
			End Get
			Set
				If (String.Equals(Me._ERPSystem, value) = false) Then
					Me.OnERPSystemChanging(value)
					Me.SendPropertyChanging
					Me._ERPSystem = value
					Me.SendPropertyChanged("ERPSystem")
					Me.OnERPSystemChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyCode", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property CompanyCode() As String
			Get
				Return Me._CompanyCode
			End Get
			Set
				If (String.Equals(Me._CompanyCode, value) = false) Then
					Me.OnCompanyCodeChanging(value)
					Me.SendPropertyChanging
					Me._CompanyCode = value
					Me.SendPropertyChanged("CompanyCode")
					Me.OnCompanyCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientCode", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property ClientCode() As String
			Get
				Return Me._ClientCode
			End Get
			Set
				If (String.Equals(Me._ClientCode, value) = false) Then
					Me.OnClientCodeChanging(value)
					Me.SendPropertyChanging
					Me._ClientCode = value
					Me.SendPropertyChanged("ClientCode")
					Me.OnClientCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PONumber", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property PONumber() As String
			Get
				Return Me._PONumber
			End Get
			Set
				If (String.Equals(Me._PONumber, value) = false) Then
					Me.OnPONumberChanging(value)
					Me.SendPropertyChanging
					Me._PONumber = value
					Me.SendPropertyChanged("PONumber")
					Me.OnPONumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierId", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property SupplierId() As String
			Get
				Return Me._SupplierId
			End Get
			Set
				If (String.Equals(Me._SupplierId, value) = false) Then
					Me.OnSupplierIdChanging(value)
					Me.SendPropertyChanging
					Me._SupplierId = value
					Me.SendPropertyChanged("SupplierId")
					Me.OnSupplierIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_POLineNum", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property POLineNum() As Integer
			Get
				Return Me._POLineNum
			End Get
			Set
				If ((Me._POLineNum = value)  _
							= false) Then
					Me.OnPOLineNumChanging(value)
					Me.SendPropertyChanging
					Me._POLineNum = value
					Me.SendPropertyChanged("POLineNum")
					Me.OnPOLineNumChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemCode", DbType:="NVarChar(30)")>  _
		Public Property ItemCode() As String
			Get
				Return Me._ItemCode
			End Get
			Set
				If (String.Equals(Me._ItemCode, value) = false) Then
					Me.OnItemCodeChanging(value)
					Me.SendPropertyChanging
					Me._ItemCode = value
					Me.SendPropertyChanged("ItemCode")
					Me.OnItemCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descr", DbType:="NVarChar(255)")>  _
		Public Property Descr() As String
			Get
				Return Me._Descr
			End Get
			Set
				If (String.Equals(Me._Descr, value) = false) Then
					Me.OnDescrChanging(value)
					Me.SendPropertyChanging
					Me._Descr = value
					Me.SendPropertyChanged("Descr")
					Me.OnDescrChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Qty", DbType:="Float")>  _
		Public Property Qty() As System.Nullable(Of Double)
			Get
				Return Me._Qty
			End Get
			Set
				If (Me._Qty.Equals(value) = false) Then
					Me.OnQtyChanging(value)
					Me.SendPropertyChanging
					Me._Qty = value
					Me.SendPropertyChanged("Qty")
					Me.OnQtyChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitPrice", DbType:="Float")>  _
		Public Property UnitPrice() As System.Nullable(Of Double)
			Get
				Return Me._UnitPrice
			End Get
			Set
				If (Me._UnitPrice.Equals(value) = false) Then
					Me.OnUnitPriceChanging(value)
					Me.SendPropertyChanging
					Me._UnitPrice = value
					Me.SendPropertyChanged("UnitPrice")
					Me.OnUnitPriceChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UoM", DbType:="NVarChar(20)")>  _
		Public Property UoM() As String
			Get
				Return Me._UoM
			End Get
			Set
				If (String.Equals(Me._UoM, value) = false) Then
					Me.OnUoMChanging(value)
					Me.SendPropertyChanging
					Me._UoM = value
					Me.SendPropertyChanged("UoM")
					Me.OnUoMChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NetTotal", DbType:="Float NOT NULL")>  _
		Public Property NetTotal() As Double
			Get
				Return Me._NetTotal
			End Get
			Set
				If ((Me._NetTotal = value)  _
							= false) Then
					Me.OnNetTotalChanging(value)
					Me.SendPropertyChanging
					Me._NetTotal = value
					Me.SendPropertyChanged("NetTotal")
					Me.OnNetTotalChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TaxTotal", DbType:="Float NOT NULL")>  _
		Public Property TaxTotal() As Double
			Get
				Return Me._TaxTotal
			End Get
			Set
				If ((Me._TaxTotal = value)  _
							= false) Then
					Me.OnTaxTotalChanging(value)
					Me.SendPropertyChanging
					Me._TaxTotal = value
					Me.SendPropertyChanged("TaxTotal")
					Me.OnTaxTotalChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VatCode", DbType:="NVarChar(5)")>  _
		Public Property VatCode() As String
			Get
				Return Me._VatCode
			End Get
			Set
				If (String.Equals(Me._VatCode, value) = false) Then
					Me.OnVatCodeChanging(value)
					Me.SendPropertyChanging
					Me._VatCode = value
					Me.SendPropertyChanged("VatCode")
					Me.OnVatCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CostCentre", DbType:="NVarChar(20)")>  _
		Public Property CostCentre() As String
			Get
				Return Me._CostCentre
			End Get
			Set
				If (String.Equals(Me._CostCentre, value) = false) Then
					Me.OnCostCentreChanging(value)
					Me.SendPropertyChanging
					Me._CostCentre = value
					Me.SendPropertyChanged("CostCentre")
					Me.OnCostCentreChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dept", DbType:="NVarChar(20)")>  _
		Public Property Dept() As String
			Get
				Return Me._Dept
			End Get
			Set
				If (String.Equals(Me._Dept, value) = false) Then
					Me.OnDeptChanging(value)
					Me.SendPropertyChanging
					Me._Dept = value
					Me.SendPropertyChanged("Dept")
					Me.OnDeptChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GLCode", DbType:="NVarChar(30)")>  _
		Public Property GLCode() As String
			Get
				Return Me._GLCode
			End Get
			Set
				If (String.Equals(Me._GLCode, value) = false) Then
					Me.OnGLCodeChanging(value)
					Me.SendPropertyChanging
					Me._GLCode = value
					Me.SendPropertyChanged("GLCode")
					Me.OnGLCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Requisitioner", DbType:="NVarChar(100)")>  _
		Public Property Requisitioner() As String
			Get
				Return Me._Requisitioner
			End Get
			Set
				If (String.Equals(Me._Requisitioner, value) = false) Then
					Me.OnRequisitionerChanging(value)
					Me.SendPropertyChanging
					Me._Requisitioner = value
					Me.SendPropertyChanged("Requisitioner")
					Me.OnRequisitionerChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Planner", DbType:="NVarChar(100)")>  _
		Public Property Planner() As String
			Get
				Return Me._Planner
			End Get
			Set
				If (String.Equals(Me._Planner, value) = false) Then
					Me.OnPlannerChanging(value)
					Me.SendPropertyChanging
					Me._Planner = value
					Me.SendPropertyChanged("Planner")
					Me.OnPlannerChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Drawer")>  _
	Partial Public Class Drawer
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _DrawerId As Integer
		
		Private _Name As String
		
		Private _Note As String
		
		Private _OwnerId As System.Nullable(Of Integer)
		
		Private _GroupId As System.Nullable(Of Integer)
		
		Private _WebSecured As System.Nullable(Of Integer)
		
		Private _DrwrType As System.Nullable(Of Integer)
		
		Private _AppendImages As System.Nullable(Of Integer)
		
		Private _RestrictDoctypes As System.Nullable(Of Integer)
		
		Private _DocMedia As System.Nullable(Of Integer)
		
		Private _MetaMedia As System.Nullable(Of Integer)
		
		Private _OpenMethod As System.Nullable(Of Integer)
		
		Private _CreateDate As System.Nullable(Of Date)
		
		Private _CreateUser As System.Nullable(Of Integer)
		
		Private _ModifyDate As System.Nullable(Of Date)
		
		Private _ModifyUser As System.Nullable(Of Integer)
		
		Private _LicenseFeatureId As System.Nullable(Of Integer)
		
		Private _Checksum As String
		
		Private _FTIndex As Integer
		
		Private _OCR As Integer
		
		Private _PolicyId As Integer
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDrawerIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDrawerIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    Partial Private Sub OnOwnerIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnOwnerIdChanged()
    End Sub
    Partial Private Sub OnGroupIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnGroupIdChanged()
    End Sub
    Partial Private Sub OnWebSecuredChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnWebSecuredChanged()
    End Sub
    Partial Private Sub OnDrwrTypeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDrwrTypeChanged()
    End Sub
    Partial Private Sub OnAppendImagesChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAppendImagesChanged()
    End Sub
    Partial Private Sub OnRestrictDoctypesChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRestrictDoctypesChanged()
    End Sub
    Partial Private Sub OnDocMediaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDocMediaChanged()
    End Sub
    Partial Private Sub OnMetaMediaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMetaMediaChanged()
    End Sub
    Partial Private Sub OnOpenMethodChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnOpenMethodChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnCreateUserChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCreateUserChanged()
    End Sub
    Partial Private Sub OnModifyDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnModifyDateChanged()
    End Sub
    Partial Private Sub OnModifyUserChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnModifyUserChanged()
    End Sub
    Partial Private Sub OnLicenseFeatureIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLicenseFeatureIdChanged()
    End Sub
    Partial Private Sub OnChecksumChanging(value As String)
    End Sub
    Partial Private Sub OnChecksumChanged()
    End Sub
    Partial Private Sub OnFTIndexChanging(value As Integer)
    End Sub
    Partial Private Sub OnFTIndexChanged()
    End Sub
    Partial Private Sub OnOCRChanging(value As Integer)
    End Sub
    Partial Private Sub OnOCRChanged()
    End Sub
    Partial Private Sub OnPolicyIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPolicyIdChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DrawerId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property DrawerId() As Integer
			Get
				Return Me._DrawerId
			End Get
			Set
				If ((Me._DrawerId = value)  _
							= false) Then
					Me.OnDrawerIdChanging(value)
					Me.SendPropertyChanging
					Me._DrawerId = value
					Me.SendPropertyChanged("DrawerId")
					Me.OnDrawerIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(254) NOT NULL", CanBeNull:=false)>  _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set
				If (String.Equals(Me._Name, value) = false) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note", DbType:="NVarChar(40)")>  _
		Public Property Note() As String
			Get
				Return Me._Note
			End Get
			Set
				If (String.Equals(Me._Note, value) = false) Then
					Me.OnNoteChanging(value)
					Me.SendPropertyChanging
					Me._Note = value
					Me.SendPropertyChanged("Note")
					Me.OnNoteChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OwnerId", DbType:="Int")>  _
		Public Property OwnerId() As System.Nullable(Of Integer)
			Get
				Return Me._OwnerId
			End Get
			Set
				If (Me._OwnerId.Equals(value) = false) Then
					Me.OnOwnerIdChanging(value)
					Me.SendPropertyChanging
					Me._OwnerId = value
					Me.SendPropertyChanged("OwnerId")
					Me.OnOwnerIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupId", DbType:="Int")>  _
		Public Property GroupId() As System.Nullable(Of Integer)
			Get
				Return Me._GroupId
			End Get
			Set
				If (Me._GroupId.Equals(value) = false) Then
					Me.OnGroupIdChanging(value)
					Me.SendPropertyChanging
					Me._GroupId = value
					Me.SendPropertyChanged("GroupId")
					Me.OnGroupIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WebSecured", DbType:="Int")>  _
		Public Property WebSecured() As System.Nullable(Of Integer)
			Get
				Return Me._WebSecured
			End Get
			Set
				If (Me._WebSecured.Equals(value) = false) Then
					Me.OnWebSecuredChanging(value)
					Me.SendPropertyChanging
					Me._WebSecured = value
					Me.SendPropertyChanged("WebSecured")
					Me.OnWebSecuredChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DrwrType", DbType:="Int")>  _
		Public Property DrwrType() As System.Nullable(Of Integer)
			Get
				Return Me._DrwrType
			End Get
			Set
				If (Me._DrwrType.Equals(value) = false) Then
					Me.OnDrwrTypeChanging(value)
					Me.SendPropertyChanging
					Me._DrwrType = value
					Me.SendPropertyChanged("DrwrType")
					Me.OnDrwrTypeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AppendImages", DbType:="Int")>  _
		Public Property AppendImages() As System.Nullable(Of Integer)
			Get
				Return Me._AppendImages
			End Get
			Set
				If (Me._AppendImages.Equals(value) = false) Then
					Me.OnAppendImagesChanging(value)
					Me.SendPropertyChanging
					Me._AppendImages = value
					Me.SendPropertyChanged("AppendImages")
					Me.OnAppendImagesChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RestrictDoctypes", DbType:="Int")>  _
		Public Property RestrictDoctypes() As System.Nullable(Of Integer)
			Get
				Return Me._RestrictDoctypes
			End Get
			Set
				If (Me._RestrictDoctypes.Equals(value) = false) Then
					Me.OnRestrictDoctypesChanging(value)
					Me.SendPropertyChanging
					Me._RestrictDoctypes = value
					Me.SendPropertyChanged("RestrictDoctypes")
					Me.OnRestrictDoctypesChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocMedia", DbType:="Int")>  _
		Public Property DocMedia() As System.Nullable(Of Integer)
			Get
				Return Me._DocMedia
			End Get
			Set
				If (Me._DocMedia.Equals(value) = false) Then
					Me.OnDocMediaChanging(value)
					Me.SendPropertyChanging
					Me._DocMedia = value
					Me.SendPropertyChanged("DocMedia")
					Me.OnDocMediaChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MetaMedia", DbType:="Int")>  _
		Public Property MetaMedia() As System.Nullable(Of Integer)
			Get
				Return Me._MetaMedia
			End Get
			Set
				If (Me._MetaMedia.Equals(value) = false) Then
					Me.OnMetaMediaChanging(value)
					Me.SendPropertyChanging
					Me._MetaMedia = value
					Me.SendPropertyChanged("MetaMedia")
					Me.OnMetaMediaChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OpenMethod", DbType:="Int")>  _
		Public Property OpenMethod() As System.Nullable(Of Integer)
			Get
				Return Me._OpenMethod
			End Get
			Set
				If (Me._OpenMethod.Equals(value) = false) Then
					Me.OnOpenMethodChanging(value)
					Me.SendPropertyChanging
					Me._OpenMethod = value
					Me.SendPropertyChanged("OpenMethod")
					Me.OnOpenMethodChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate", DbType:="DateTime")>  _
		Public Property CreateDate() As System.Nullable(Of Date)
			Get
				Return Me._CreateDate
			End Get
			Set
				If (Me._CreateDate.Equals(value) = false) Then
					Me.OnCreateDateChanging(value)
					Me.SendPropertyChanging
					Me._CreateDate = value
					Me.SendPropertyChanged("CreateDate")
					Me.OnCreateDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateUser", DbType:="Int")>  _
		Public Property CreateUser() As System.Nullable(Of Integer)
			Get
				Return Me._CreateUser
			End Get
			Set
				If (Me._CreateUser.Equals(value) = false) Then
					Me.OnCreateUserChanging(value)
					Me.SendPropertyChanging
					Me._CreateUser = value
					Me.SendPropertyChanged("CreateUser")
					Me.OnCreateUserChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifyDate", DbType:="DateTime")>  _
		Public Property ModifyDate() As System.Nullable(Of Date)
			Get
				Return Me._ModifyDate
			End Get
			Set
				If (Me._ModifyDate.Equals(value) = false) Then
					Me.OnModifyDateChanging(value)
					Me.SendPropertyChanging
					Me._ModifyDate = value
					Me.SendPropertyChanged("ModifyDate")
					Me.OnModifyDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifyUser", DbType:="Int")>  _
		Public Property ModifyUser() As System.Nullable(Of Integer)
			Get
				Return Me._ModifyUser
			End Get
			Set
				If (Me._ModifyUser.Equals(value) = false) Then
					Me.OnModifyUserChanging(value)
					Me.SendPropertyChanging
					Me._ModifyUser = value
					Me.SendPropertyChanged("ModifyUser")
					Me.OnModifyUserChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LicenseFeatureId", DbType:="Int")>  _
		Public Property LicenseFeatureId() As System.Nullable(Of Integer)
			Get
				Return Me._LicenseFeatureId
			End Get
			Set
				If (Me._LicenseFeatureId.Equals(value) = false) Then
					Me.OnLicenseFeatureIdChanging(value)
					Me.SendPropertyChanging
					Me._LicenseFeatureId = value
					Me.SendPropertyChanged("LicenseFeatureId")
					Me.OnLicenseFeatureIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Checksum", DbType:="NVarChar(500)")>  _
		Public Property Checksum() As String
			Get
				Return Me._Checksum
			End Get
			Set
				If (String.Equals(Me._Checksum, value) = false) Then
					Me.OnChecksumChanging(value)
					Me.SendPropertyChanging
					Me._Checksum = value
					Me.SendPropertyChanged("Checksum")
					Me.OnChecksumChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FTIndex", DbType:="Int NOT NULL")>  _
		Public Property FTIndex() As Integer
			Get
				Return Me._FTIndex
			End Get
			Set
				If ((Me._FTIndex = value)  _
							= false) Then
					Me.OnFTIndexChanging(value)
					Me.SendPropertyChanging
					Me._FTIndex = value
					Me.SendPropertyChanged("FTIndex")
					Me.OnFTIndexChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OCR", DbType:="Int NOT NULL")>  _
		Public Property OCR() As Integer
			Get
				Return Me._OCR
			End Get
			Set
				If ((Me._OCR = value)  _
							= false) Then
					Me.OnOCRChanging(value)
					Me.SendPropertyChanging
					Me._OCR = value
					Me.SendPropertyChanged("OCR")
					Me.OnOCRChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PolicyId", DbType:="Int NOT NULL")>  _
		Public Property PolicyId() As Integer
			Get
				Return Me._PolicyId
			End Get
			Set
				If ((Me._PolicyId = value)  _
							= false) Then
					Me.OnPolicyIdChanging(value)
					Me.SendPropertyChanging
					Me._PolicyId = value
					Me.SendPropertyChanged("PolicyId")
					Me.OnPolicyIdChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.COST_CENTRE")>  _
	Partial Public Class COST_CENTRE
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ERPSystem As String
		
		Private _CompanyCode As String
		
		Private _ClientCode As String
		
		Private _Department As String
		
		Private _CostCentre As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnERPSystemChanging(value As String)
    End Sub
    Partial Private Sub OnERPSystemChanged()
    End Sub
    Partial Private Sub OnCompanyCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCompanyCodeChanged()
    End Sub
    Partial Private Sub OnClientCodeChanging(value As String)
    End Sub
    Partial Private Sub OnClientCodeChanged()
    End Sub
    Partial Private Sub OnDepartmentChanging(value As String)
    End Sub
    Partial Private Sub OnDepartmentChanged()
    End Sub
    Partial Private Sub OnCostCentreChanging(value As String)
    End Sub
    Partial Private Sub OnCostCentreChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ERPSystem", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property ERPSystem() As String
			Get
				Return Me._ERPSystem
			End Get
			Set
				If (String.Equals(Me._ERPSystem, value) = false) Then
					Me.OnERPSystemChanging(value)
					Me.SendPropertyChanging
					Me._ERPSystem = value
					Me.SendPropertyChanged("ERPSystem")
					Me.OnERPSystemChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyCode", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property CompanyCode() As String
			Get
				Return Me._CompanyCode
			End Get
			Set
				If (String.Equals(Me._CompanyCode, value) = false) Then
					Me.OnCompanyCodeChanging(value)
					Me.SendPropertyChanging
					Me._CompanyCode = value
					Me.SendPropertyChanged("CompanyCode")
					Me.OnCompanyCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientCode", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property ClientCode() As String
			Get
				Return Me._ClientCode
			End Get
			Set
				If (String.Equals(Me._ClientCode, value) = false) Then
					Me.OnClientCodeChanging(value)
					Me.SendPropertyChanging
					Me._ClientCode = value
					Me.SendPropertyChanged("ClientCode")
					Me.OnClientCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Department", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property Department() As String
			Get
				Return Me._Department
			End Get
			Set
				If (String.Equals(Me._Department, value) = false) Then
					Me.OnDepartmentChanging(value)
					Me.SendPropertyChanging
					Me._Department = value
					Me.SendPropertyChanged("Department")
					Me.OnDepartmentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CostCentre", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property CostCentre() As String
			Get
				Return Me._CostCentre
			End Get
			Set
				If (String.Equals(Me._CostCentre, value) = false) Then
					Me.OnCostCentreChanging(value)
					Me.SendPropertyChanging
					Me._CostCentre = value
					Me.SendPropertyChanged("CostCentre")
					Me.OnCostCentreChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.COST_CENTRE_MEMBER")>  _
	Partial Public Class COST_CENTRE_MEMBER
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ERPSystem As String
		
		Private _CompanyCode As String
		
		Private _ClientCode As String
		
		Private _CostCentre As String
		
		Private _MemberId As Integer
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnERPSystemChanging(value As String)
    End Sub
    Partial Private Sub OnERPSystemChanged()
    End Sub
    Partial Private Sub OnCompanyCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCompanyCodeChanged()
    End Sub
    Partial Private Sub OnClientCodeChanging(value As String)
    End Sub
    Partial Private Sub OnClientCodeChanged()
    End Sub
    Partial Private Sub OnCostCentreChanging(value As String)
    End Sub
    Partial Private Sub OnCostCentreChanged()
    End Sub
    Partial Private Sub OnMemberIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnMemberIdChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ERPSystem", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property ERPSystem() As String
			Get
				Return Me._ERPSystem
			End Get
			Set
				If (String.Equals(Me._ERPSystem, value) = false) Then
					Me.OnERPSystemChanging(value)
					Me.SendPropertyChanging
					Me._ERPSystem = value
					Me.SendPropertyChanged("ERPSystem")
					Me.OnERPSystemChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyCode", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property CompanyCode() As String
			Get
				Return Me._CompanyCode
			End Get
			Set
				If (String.Equals(Me._CompanyCode, value) = false) Then
					Me.OnCompanyCodeChanging(value)
					Me.SendPropertyChanging
					Me._CompanyCode = value
					Me.SendPropertyChanged("CompanyCode")
					Me.OnCompanyCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientCode", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property ClientCode() As String
			Get
				Return Me._ClientCode
			End Get
			Set
				If (String.Equals(Me._ClientCode, value) = false) Then
					Me.OnClientCodeChanging(value)
					Me.SendPropertyChanging
					Me._ClientCode = value
					Me.SendPropertyChanged("ClientCode")
					Me.OnClientCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CostCentre", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property CostCentre() As String
			Get
				Return Me._CostCentre
			End Get
			Set
				If (String.Equals(Me._CostCentre, value) = false) Then
					Me.OnCostCentreChanging(value)
					Me.SendPropertyChanging
					Me._CostCentre = value
					Me.SendPropertyChanged("CostCentre")
					Me.OnCostCentreChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MemberId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property MemberId() As Integer
			Get
				Return Me._MemberId
			End Get
			Set
				If ((Me._MemberId = value)  _
							= false) Then
					Me.OnMemberIdChanging(value)
					Me.SendPropertyChanging
					Me._MemberId = value
					Me.SendPropertyChanged("MemberId")
					Me.OnMemberIdChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_VAT_FILTER")>  _
	Partial Public Class AP_VAT_FILTER
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _FilterId As Integer
		
		Private _ERPSystem As String
		
		Private _CompanyCode As String
		
		Private _ClientCode As String
		
		Private _FilterName As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFilterIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnFilterIdChanged()
    End Sub
    Partial Private Sub OnERPSystemChanging(value As String)
    End Sub
    Partial Private Sub OnERPSystemChanged()
    End Sub
    Partial Private Sub OnCompanyCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCompanyCodeChanged()
    End Sub
    Partial Private Sub OnClientCodeChanging(value As String)
    End Sub
    Partial Private Sub OnClientCodeChanged()
    End Sub
    Partial Private Sub OnFilterNameChanging(value As String)
    End Sub
    Partial Private Sub OnFilterNameChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FilterId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property FilterId() As Integer
			Get
				Return Me._FilterId
			End Get
			Set
				If ((Me._FilterId = value)  _
							= false) Then
					Me.OnFilterIdChanging(value)
					Me.SendPropertyChanging
					Me._FilterId = value
					Me.SendPropertyChanged("FilterId")
					Me.OnFilterIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ERPSystem", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property ERPSystem() As String
			Get
				Return Me._ERPSystem
			End Get
			Set
				If (String.Equals(Me._ERPSystem, value) = false) Then
					Me.OnERPSystemChanging(value)
					Me.SendPropertyChanging
					Me._ERPSystem = value
					Me.SendPropertyChanged("ERPSystem")
					Me.OnERPSystemChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyCode", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property CompanyCode() As String
			Get
				Return Me._CompanyCode
			End Get
			Set
				If (String.Equals(Me._CompanyCode, value) = false) Then
					Me.OnCompanyCodeChanging(value)
					Me.SendPropertyChanging
					Me._CompanyCode = value
					Me.SendPropertyChanged("CompanyCode")
					Me.OnCompanyCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientCode", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property ClientCode() As String
			Get
				Return Me._ClientCode
			End Get
			Set
				If (String.Equals(Me._ClientCode, value) = false) Then
					Me.OnClientCodeChanging(value)
					Me.SendPropertyChanging
					Me._ClientCode = value
					Me.SendPropertyChanged("ClientCode")
					Me.OnClientCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FilterName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property FilterName() As String
			Get
				Return Me._FilterName
			End Get
			Set
				If (String.Equals(Me._FilterName, value) = false) Then
					Me.OnFilterNameChanging(value)
					Me.SendPropertyChanging
					Me._FilterName = value
					Me.SendPropertyChanged("FilterName")
					Me.OnFilterNameChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_VAT_FILTER_CONDITION")>  _
	Partial Public Class AP_VAT_FILTER_CONDITION
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _FilterId As Integer
		
		Private _TableName As String
		
		Private _FieldName As String
		
		Private _Condition As Integer
		
		Private _Value As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFilterIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnFilterIdChanged()
    End Sub
    Partial Private Sub OnTableNameChanging(value As String)
    End Sub
    Partial Private Sub OnTableNameChanged()
    End Sub
    Partial Private Sub OnFieldNameChanging(value As String)
    End Sub
    Partial Private Sub OnFieldNameChanged()
    End Sub
    Partial Private Sub OnConditionChanging(value As Integer)
    End Sub
    Partial Private Sub OnConditionChanged()
    End Sub
    Partial Private Sub OnValueChanging(value As String)
    End Sub
    Partial Private Sub OnValueChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FilterId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property FilterId() As Integer
			Get
				Return Me._FilterId
			End Get
			Set
				If ((Me._FilterId = value)  _
							= false) Then
					Me.OnFilterIdChanging(value)
					Me.SendPropertyChanging
					Me._FilterId = value
					Me.SendPropertyChanged("FilterId")
					Me.OnFilterIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TableName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property TableName() As String
			Get
				Return Me._TableName
			End Get
			Set
				If (String.Equals(Me._TableName, value) = false) Then
					Me.OnTableNameChanging(value)
					Me.SendPropertyChanging
					Me._TableName = value
					Me.SendPropertyChanged("TableName")
					Me.OnTableNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FieldName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property FieldName() As String
			Get
				Return Me._FieldName
			End Get
			Set
				If (String.Equals(Me._FieldName, value) = false) Then
					Me.OnFieldNameChanging(value)
					Me.SendPropertyChanging
					Me._FieldName = value
					Me.SendPropertyChanged("FieldName")
					Me.OnFieldNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Condition", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property Condition() As Integer
			Get
				Return Me._Condition
			End Get
			Set
				If ((Me._Condition = value)  _
							= false) Then
					Me.OnConditionChanging(value)
					Me.SendPropertyChanging
					Me._Condition = value
					Me.SendPropertyChanged("Condition")
					Me.OnConditionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Value() As String
			Get
				Return Me._Value
			End Get
			Set
				If (String.Equals(Me._Value, value) = false) Then
					Me.OnValueChanging(value)
					Me.SendPropertyChanging
					Me._Value = value
					Me.SendPropertyChanged("Value")
					Me.OnValueChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_VAT_FILTER_CODE")>  _
	Partial Public Class AP_VAT_FILTER_CODE
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _FilterId As Integer
		
		Private _VatCode As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFilterIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnFilterIdChanged()
    End Sub
    Partial Private Sub OnVatCodeChanging(value As String)
    End Sub
    Partial Private Sub OnVatCodeChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FilterId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property FilterId() As Integer
			Get
				Return Me._FilterId
			End Get
			Set
				If ((Me._FilterId = value)  _
							= false) Then
					Me.OnFilterIdChanging(value)
					Me.SendPropertyChanging
					Me._FilterId = value
					Me.SendPropertyChanged("FilterId")
					Me.OnFilterIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VatCode", DbType:="NVarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property VatCode() As String
			Get
				Return Me._VatCode
			End Get
			Set
				If (String.Equals(Me._VatCode, value) = false) Then
					Me.OnVatCodeChanging(value)
					Me.SendPropertyChanging
					Me._VatCode = value
					Me.SendPropertyChanged("VatCode")
					Me.OnVatCodeChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_SKELETON_HEADER")>  _
	Partial Public Class AP_SKELETON_HEADER
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _SkeletonId As System.Guid
		
		Private _ERPSystem As String
		
		Private _CompanyCode As String
		
		Private _ClientCode As String
		
		Private _SupplierId As String
		
		Private _Name As String
		
		Private _Descr As String
		
		Private _AutoApply As Boolean
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSkeletonIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnSkeletonIdChanged()
    End Sub
    Partial Private Sub OnERPSystemChanging(value As String)
    End Sub
    Partial Private Sub OnERPSystemChanged()
    End Sub
    Partial Private Sub OnCompanyCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCompanyCodeChanged()
    End Sub
    Partial Private Sub OnClientCodeChanging(value As String)
    End Sub
    Partial Private Sub OnClientCodeChanged()
    End Sub
    Partial Private Sub OnSupplierIdChanging(value As String)
    End Sub
    Partial Private Sub OnSupplierIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescrChanging(value As String)
    End Sub
    Partial Private Sub OnDescrChanged()
    End Sub
    Partial Private Sub OnAutoApplyChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAutoApplyChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SkeletonId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
		Public Property SkeletonId() As System.Guid
			Get
				Return Me._SkeletonId
			End Get
			Set
				If ((Me._SkeletonId = value)  _
							= false) Then
					Me.OnSkeletonIdChanging(value)
					Me.SendPropertyChanging
					Me._SkeletonId = value
					Me.SendPropertyChanged("SkeletonId")
					Me.OnSkeletonIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ERPSystem", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property ERPSystem() As String
			Get
				Return Me._ERPSystem
			End Get
			Set
				If (String.Equals(Me._ERPSystem, value) = false) Then
					Me.OnERPSystemChanging(value)
					Me.SendPropertyChanging
					Me._ERPSystem = value
					Me.SendPropertyChanged("ERPSystem")
					Me.OnERPSystemChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyCode", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property CompanyCode() As String
			Get
				Return Me._CompanyCode
			End Get
			Set
				If (String.Equals(Me._CompanyCode, value) = false) Then
					Me.OnCompanyCodeChanging(value)
					Me.SendPropertyChanging
					Me._CompanyCode = value
					Me.SendPropertyChanged("CompanyCode")
					Me.OnCompanyCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientCode", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property ClientCode() As String
			Get
				Return Me._ClientCode
			End Get
			Set
				If (String.Equals(Me._ClientCode, value) = false) Then
					Me.OnClientCodeChanging(value)
					Me.SendPropertyChanging
					Me._ClientCode = value
					Me.SendPropertyChanged("ClientCode")
					Me.OnClientCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierId", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property SupplierId() As String
			Get
				Return Me._SupplierId
			End Get
			Set
				If (String.Equals(Me._SupplierId, value) = false) Then
					Me.OnSupplierIdChanging(value)
					Me.SendPropertyChanging
					Me._SupplierId = value
					Me.SendPropertyChanged("SupplierId")
					Me.OnSupplierIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(30) NOT NULL", CanBeNull:=false)>  _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set
				If (String.Equals(Me._Name, value) = false) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descr", DbType:="NVarChar(500)")>  _
		Public Property Descr() As String
			Get
				Return Me._Descr
			End Get
			Set
				If (String.Equals(Me._Descr, value) = false) Then
					Me.OnDescrChanging(value)
					Me.SendPropertyChanging
					Me._Descr = value
					Me.SendPropertyChanged("Descr")
					Me.OnDescrChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AutoApply", DbType:="Bit NOT NULL")>  _
		Public Property AutoApply() As Boolean
			Get
				Return Me._AutoApply
			End Get
			Set
				If ((Me._AutoApply = value)  _
							= false) Then
					Me.OnAutoApplyChanging(value)
					Me.SendPropertyChanging
					Me._AutoApply = value
					Me.SendPropertyChanged("AutoApply")
					Me.OnAutoApplyChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_SKELETON_DETAIL")>  _
	Partial Public Class AP_SKELETON_DETAIL
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _SkeletonId As System.Guid
		
		Private _RowNumber As Integer
		
		Private _ItemCode As String
		
		Private _Memo As String
		
		Private _ValueProportion As Double
		
		Private _VatCode As String
		
		Private _CostCentre As String
		
		Private _Dept As String
		
		Private _GLCode As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSkeletonIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnSkeletonIdChanged()
    End Sub
    Partial Private Sub OnRowNumberChanging(value As Integer)
    End Sub
    Partial Private Sub OnRowNumberChanged()
    End Sub
    Partial Private Sub OnItemCodeChanging(value As String)
    End Sub
    Partial Private Sub OnItemCodeChanged()
    End Sub
    Partial Private Sub OnMemoChanging(value As String)
    End Sub
    Partial Private Sub OnMemoChanged()
    End Sub
    Partial Private Sub OnValueProportionChanging(value As Double)
    End Sub
    Partial Private Sub OnValueProportionChanged()
    End Sub
    Partial Private Sub OnVatCodeChanging(value As String)
    End Sub
    Partial Private Sub OnVatCodeChanged()
    End Sub
    Partial Private Sub OnCostCentreChanging(value As String)
    End Sub
    Partial Private Sub OnCostCentreChanged()
    End Sub
    Partial Private Sub OnDeptChanging(value As String)
    End Sub
    Partial Private Sub OnDeptChanged()
    End Sub
    Partial Private Sub OnGLCodeChanging(value As String)
    End Sub
    Partial Private Sub OnGLCodeChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SkeletonId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
		Public Property SkeletonId() As System.Guid
			Get
				Return Me._SkeletonId
			End Get
			Set
				If ((Me._SkeletonId = value)  _
							= false) Then
					Me.OnSkeletonIdChanging(value)
					Me.SendPropertyChanging
					Me._SkeletonId = value
					Me.SendPropertyChanged("SkeletonId")
					Me.OnSkeletonIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RowNumber", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property RowNumber() As Integer
			Get
				Return Me._RowNumber
			End Get
			Set
				If ((Me._RowNumber = value)  _
							= false) Then
					Me.OnRowNumberChanging(value)
					Me.SendPropertyChanging
					Me._RowNumber = value
					Me.SendPropertyChanged("RowNumber")
					Me.OnRowNumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemCode", DbType:="NVarChar(30)")>  _
		Public Property ItemCode() As String
			Get
				Return Me._ItemCode
			End Get
			Set
				If (String.Equals(Me._ItemCode, value) = false) Then
					Me.OnItemCodeChanging(value)
					Me.SendPropertyChanging
					Me._ItemCode = value
					Me.SendPropertyChanged("ItemCode")
					Me.OnItemCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Memo", DbType:="NVarChar(50)")>  _
		Public Property Memo() As String
			Get
				Return Me._Memo
			End Get
			Set
				If (String.Equals(Me._Memo, value) = false) Then
					Me.OnMemoChanging(value)
					Me.SendPropertyChanging
					Me._Memo = value
					Me.SendPropertyChanged("Memo")
					Me.OnMemoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ValueProportion", DbType:="Float NOT NULL")>  _
		Public Property ValueProportion() As Double
			Get
				Return Me._ValueProportion
			End Get
			Set
				If ((Me._ValueProportion = value)  _
							= false) Then
					Me.OnValueProportionChanging(value)
					Me.SendPropertyChanging
					Me._ValueProportion = value
					Me.SendPropertyChanged("ValueProportion")
					Me.OnValueProportionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VatCode", DbType:="NVarChar(5)")>  _
		Public Property VatCode() As String
			Get
				Return Me._VatCode
			End Get
			Set
				If (String.Equals(Me._VatCode, value) = false) Then
					Me.OnVatCodeChanging(value)
					Me.SendPropertyChanging
					Me._VatCode = value
					Me.SendPropertyChanged("VatCode")
					Me.OnVatCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CostCentre", DbType:="NVarChar(20)")>  _
		Public Property CostCentre() As String
			Get
				Return Me._CostCentre
			End Get
			Set
				If (String.Equals(Me._CostCentre, value) = false) Then
					Me.OnCostCentreChanging(value)
					Me.SendPropertyChanging
					Me._CostCentre = value
					Me.SendPropertyChanged("CostCentre")
					Me.OnCostCentreChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dept", DbType:="NVarChar(20)")>  _
		Public Property Dept() As String
			Get
				Return Me._Dept
			End Get
			Set
				If (String.Equals(Me._Dept, value) = false) Then
					Me.OnDeptChanging(value)
					Me.SendPropertyChanging
					Me._Dept = value
					Me.SendPropertyChanged("Dept")
					Me.OnDeptChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GLCode", DbType:="NVarChar(20)")>  _
		Public Property GLCode() As String
			Get
				Return Me._GLCode
			End Get
			Set
				If (String.Equals(Me._GLCode, value) = false) Then
					Me.OnGLCodeChanging(value)
					Me.SendPropertyChanging
					Me._GLCode = value
					Me.SendPropertyChanged("GLCode")
					Me.OnGLCodeChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_STATUS_UPDATES")>  _
	Partial Public Class AP_STATUS_UPDATE
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ERPSystem As String
		
		Private _CompanyCode As String
		
		Private _ClientCode As String
		
		Private _WFStatus As Integer
		
		Private _APAction As String
		
		Private _TableName As String
		
		Private _FieldName As String
		
		Private _Value As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnERPSystemChanging(value As String)
    End Sub
    Partial Private Sub OnERPSystemChanged()
    End Sub
    Partial Private Sub OnCompanyCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCompanyCodeChanged()
    End Sub
    Partial Private Sub OnClientCodeChanging(value As String)
    End Sub
    Partial Private Sub OnClientCodeChanged()
    End Sub
    Partial Private Sub OnWFStatusChanging(value As Integer)
    End Sub
    Partial Private Sub OnWFStatusChanged()
    End Sub
    Partial Private Sub OnAPActionChanging(value As String)
    End Sub
    Partial Private Sub OnAPActionChanged()
    End Sub
    Partial Private Sub OnTableNameChanging(value As String)
    End Sub
    Partial Private Sub OnTableNameChanged()
    End Sub
    Partial Private Sub OnFieldNameChanging(value As String)
    End Sub
    Partial Private Sub OnFieldNameChanged()
    End Sub
    Partial Private Sub OnValueChanging(value As String)
    End Sub
    Partial Private Sub OnValueChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ERPSystem", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property ERPSystem() As String
			Get
				Return Me._ERPSystem
			End Get
			Set
				If (String.Equals(Me._ERPSystem, value) = false) Then
					Me.OnERPSystemChanging(value)
					Me.SendPropertyChanging
					Me._ERPSystem = value
					Me.SendPropertyChanged("ERPSystem")
					Me.OnERPSystemChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyCode", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property CompanyCode() As String
			Get
				Return Me._CompanyCode
			End Get
			Set
				If (String.Equals(Me._CompanyCode, value) = false) Then
					Me.OnCompanyCodeChanging(value)
					Me.SendPropertyChanging
					Me._CompanyCode = value
					Me.SendPropertyChanged("CompanyCode")
					Me.OnCompanyCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientCode", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property ClientCode() As String
			Get
				Return Me._ClientCode
			End Get
			Set
				If (String.Equals(Me._ClientCode, value) = false) Then
					Me.OnClientCodeChanging(value)
					Me.SendPropertyChanging
					Me._ClientCode = value
					Me.SendPropertyChanged("ClientCode")
					Me.OnClientCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WFStatus", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property WFStatus() As Integer
			Get
				Return Me._WFStatus
			End Get
			Set
				If ((Me._WFStatus = value)  _
							= false) Then
					Me.OnWFStatusChanging(value)
					Me.SendPropertyChanging
					Me._WFStatus = value
					Me.SendPropertyChanged("WFStatus")
					Me.OnWFStatusChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_APAction", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property APAction() As String
			Get
				Return Me._APAction
			End Get
			Set
				If (String.Equals(Me._APAction, value) = false) Then
					Me.OnAPActionChanging(value)
					Me.SendPropertyChanging
					Me._APAction = value
					Me.SendPropertyChanged("APAction")
					Me.OnAPActionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TableName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property TableName() As String
			Get
				Return Me._TableName
			End Get
			Set
				If (String.Equals(Me._TableName, value) = false) Then
					Me.OnTableNameChanging(value)
					Me.SendPropertyChanging
					Me._TableName = value
					Me.SendPropertyChanged("TableName")
					Me.OnTableNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FieldName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property FieldName() As String
			Get
				Return Me._FieldName
			End Get
			Set
				If (String.Equals(Me._FieldName, value) = false) Then
					Me.OnFieldNameChanging(value)
					Me.SendPropertyChanging
					Me._FieldName = value
					Me.SendPropertyChanged("FieldName")
					Me.OnFieldNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Value() As String
			Get
				Return Me._Value
			End Get
			Set
				If (String.Equals(Me._Value, value) = false) Then
					Me.OnValueChanging(value)
					Me.SendPropertyChanging
					Me._Value = value
					Me.SendPropertyChanged("Value")
					Me.OnValueChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DEPARTMENT")>  _
	Partial Public Class DEPARTMENT
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ERPSystem As String
		
		Private _CompanyCode As String
		
		Private _ClientCode As String
		
		Private _Department As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnERPSystemChanging(value As String)
    End Sub
    Partial Private Sub OnERPSystemChanged()
    End Sub
    Partial Private Sub OnCompanyCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCompanyCodeChanged()
    End Sub
    Partial Private Sub OnClientCodeChanging(value As String)
    End Sub
    Partial Private Sub OnClientCodeChanged()
    End Sub
    Partial Private Sub OnDepartmentChanging(value As String)
    End Sub
    Partial Private Sub OnDepartmentChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ERPSystem", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property ERPSystem() As String
			Get
				Return Me._ERPSystem
			End Get
			Set
				If (String.Equals(Me._ERPSystem, value) = false) Then
					Me.OnERPSystemChanging(value)
					Me.SendPropertyChanging
					Me._ERPSystem = value
					Me.SendPropertyChanged("ERPSystem")
					Me.OnERPSystemChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyCode", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property CompanyCode() As String
			Get
				Return Me._CompanyCode
			End Get
			Set
				If (String.Equals(Me._CompanyCode, value) = false) Then
					Me.OnCompanyCodeChanging(value)
					Me.SendPropertyChanging
					Me._CompanyCode = value
					Me.SendPropertyChanged("CompanyCode")
					Me.OnCompanyCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientCode", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property ClientCode() As String
			Get
				Return Me._ClientCode
			End Get
			Set
				If (String.Equals(Me._ClientCode, value) = false) Then
					Me.OnClientCodeChanging(value)
					Me.SendPropertyChanging
					Me._ClientCode = value
					Me.SendPropertyChanged("ClientCode")
					Me.OnClientCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Department", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property Department() As String
			Get
				Return Me._Department
			End Get
			Set
				If (String.Equals(Me._Department, value) = false) Then
					Me.OnDepartmentChanging(value)
					Me.SendPropertyChanging
					Me._Department = value
					Me.SendPropertyChanged("Department")
					Me.OnDepartmentChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DOC_APPROVAL")>  _
	Partial Public Class DOC_APPROVAL
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _DrawerId As Integer
		
		Private _DocId As Integer
		
		Private _Sequential As Boolean
		
		Private _ApprovalGroup As Integer
		
		Private _ApproversRequired As Integer
		
		Private _ApproversGained As Integer
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDrawerIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDrawerIdChanged()
    End Sub
    Partial Private Sub OnDocIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDocIdChanged()
    End Sub
    Partial Private Sub OnSequentialChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSequentialChanged()
    End Sub
    Partial Private Sub OnApprovalGroupChanging(value As Integer)
    End Sub
    Partial Private Sub OnApprovalGroupChanged()
    End Sub
    Partial Private Sub OnApproversRequiredChanging(value As Integer)
    End Sub
    Partial Private Sub OnApproversRequiredChanged()
    End Sub
    Partial Private Sub OnApproversGainedChanging(value As Integer)
    End Sub
    Partial Private Sub OnApproversGainedChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DrawerId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property DrawerId() As Integer
			Get
				Return Me._DrawerId
			End Get
			Set
				If ((Me._DrawerId = value)  _
							= false) Then
					Me.OnDrawerIdChanging(value)
					Me.SendPropertyChanging
					Me._DrawerId = value
					Me.SendPropertyChanged("DrawerId")
					Me.OnDrawerIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property DocId() As Integer
			Get
				Return Me._DocId
			End Get
			Set
				If ((Me._DocId = value)  _
							= false) Then
					Me.OnDocIdChanging(value)
					Me.SendPropertyChanging
					Me._DocId = value
					Me.SendPropertyChanged("DocId")
					Me.OnDocIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sequential", DbType:="Bit NOT NULL")>  _
		Public Property Sequential() As Boolean
			Get
				Return Me._Sequential
			End Get
			Set
				If ((Me._Sequential = value)  _
							= false) Then
					Me.OnSequentialChanging(value)
					Me.SendPropertyChanging
					Me._Sequential = value
					Me.SendPropertyChanged("Sequential")
					Me.OnSequentialChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApprovalGroup", DbType:="Int NOT NULL")>  _
		Public Property ApprovalGroup() As Integer
			Get
				Return Me._ApprovalGroup
			End Get
			Set
				If ((Me._ApprovalGroup = value)  _
							= false) Then
					Me.OnApprovalGroupChanging(value)
					Me.SendPropertyChanging
					Me._ApprovalGroup = value
					Me.SendPropertyChanged("ApprovalGroup")
					Me.OnApprovalGroupChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApproversRequired", DbType:="Int NOT NULL")>  _
		Public Property ApproversRequired() As Integer
			Get
				Return Me._ApproversRequired
			End Get
			Set
				If ((Me._ApproversRequired = value)  _
							= false) Then
					Me.OnApproversRequiredChanging(value)
					Me.SendPropertyChanging
					Me._ApproversRequired = value
					Me.SendPropertyChanged("ApproversRequired")
					Me.OnApproversRequiredChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApproversGained", DbType:="Int NOT NULL")>  _
		Public Property ApproversGained() As Integer
			Get
				Return Me._ApproversGained
			End Get
			Set
				If ((Me._ApproversGained = value)  _
							= false) Then
					Me.OnApproversGainedChanging(value)
					Me.SendPropertyChanging
					Me._ApproversGained = value
					Me.SendPropertyChanged("ApproversGained")
					Me.OnApproversGainedChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DOC_APPROVER")>  _
	Partial Public Class DOC_APPROVER
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _DrawerId As Integer
		
		Private _DocId As Integer
		
		Private _Approver As Integer
		
		Private _Delegate As System.Nullable(Of Integer)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDrawerIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDrawerIdChanged()
    End Sub
    Partial Private Sub OnDocIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDocIdChanged()
    End Sub
    Partial Private Sub OnApproverChanging(value As Integer)
    End Sub
    Partial Private Sub OnApproverChanged()
    End Sub
    Partial Private Sub OnDelegateChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDelegateChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DrawerId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property DrawerId() As Integer
			Get
				Return Me._DrawerId
			End Get
			Set
				If ((Me._DrawerId = value)  _
							= false) Then
					Me.OnDrawerIdChanging(value)
					Me.SendPropertyChanging
					Me._DrawerId = value
					Me.SendPropertyChanged("DrawerId")
					Me.OnDrawerIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property DocId() As Integer
			Get
				Return Me._DocId
			End Get
			Set
				If ((Me._DocId = value)  _
							= false) Then
					Me.OnDocIdChanging(value)
					Me.SendPropertyChanging
					Me._DocId = value
					Me.SendPropertyChanged("DocId")
					Me.OnDocIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Approver", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property Approver() As Integer
			Get
				Return Me._Approver
			End Get
			Set
				If ((Me._Approver = value)  _
							= false) Then
					Me.OnApproverChanging(value)
					Me.SendPropertyChanging
					Me._Approver = value
					Me.SendPropertyChanged("Approver")
					Me.OnApproverChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Delegate", Storage:="_Delegate", DbType:="Int")>  _
		Public Property [Delegate]() As System.Nullable(Of Integer)
			Get
				Return Me._Delegate
			End Get
			Set
				If (Me._Delegate.Equals(value) = false) Then
					Me.OnDelegateChanging(value)
					Me.SendPropertyChanging
					Me._Delegate = value
					Me.SendPropertyChanged("[Delegate]")
					Me.OnDelegateChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.VAT_CODE")>  _
	Partial Public Class VAT_CODE
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ERPSystem As String
		
		Private _CompanyCode As String
		
		Private _ClientCode As String
		
		Private _VatCode As String
		
		Private _VatRate As Double
		
		Private _Descr As String
		
		Private _EffectiveDate As Date
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnERPSystemChanging(value As String)
    End Sub
    Partial Private Sub OnERPSystemChanged()
    End Sub
    Partial Private Sub OnCompanyCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCompanyCodeChanged()
    End Sub
    Partial Private Sub OnClientCodeChanging(value As String)
    End Sub
    Partial Private Sub OnClientCodeChanged()
    End Sub
    Partial Private Sub OnVatCodeChanging(value As String)
    End Sub
    Partial Private Sub OnVatCodeChanged()
    End Sub
    Partial Private Sub OnVatRateChanging(value As Double)
    End Sub
    Partial Private Sub OnVatRateChanged()
    End Sub
    Partial Private Sub OnDescrChanging(value As String)
    End Sub
    Partial Private Sub OnDescrChanged()
    End Sub
    Partial Private Sub OnEffectiveDateChanging(value As Date)
    End Sub
    Partial Private Sub OnEffectiveDateChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ERPSystem", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property ERPSystem() As String
			Get
				Return Me._ERPSystem
			End Get
			Set
				If (String.Equals(Me._ERPSystem, value) = false) Then
					Me.OnERPSystemChanging(value)
					Me.SendPropertyChanging
					Me._ERPSystem = value
					Me.SendPropertyChanged("ERPSystem")
					Me.OnERPSystemChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyCode", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property CompanyCode() As String
			Get
				Return Me._CompanyCode
			End Get
			Set
				If (String.Equals(Me._CompanyCode, value) = false) Then
					Me.OnCompanyCodeChanging(value)
					Me.SendPropertyChanging
					Me._CompanyCode = value
					Me.SendPropertyChanged("CompanyCode")
					Me.OnCompanyCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientCode", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property ClientCode() As String
			Get
				Return Me._ClientCode
			End Get
			Set
				If (String.Equals(Me._ClientCode, value) = false) Then
					Me.OnClientCodeChanging(value)
					Me.SendPropertyChanging
					Me._ClientCode = value
					Me.SendPropertyChanged("ClientCode")
					Me.OnClientCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VatCode", DbType:="NVarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property VatCode() As String
			Get
				Return Me._VatCode
			End Get
			Set
				If (String.Equals(Me._VatCode, value) = false) Then
					Me.OnVatCodeChanging(value)
					Me.SendPropertyChanging
					Me._VatCode = value
					Me.SendPropertyChanged("VatCode")
					Me.OnVatCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VatRate", DbType:="Float NOT NULL")>  _
		Public Property VatRate() As Double
			Get
				Return Me._VatRate
			End Get
			Set
				If ((Me._VatRate = value)  _
							= false) Then
					Me.OnVatRateChanging(value)
					Me.SendPropertyChanging
					Me._VatRate = value
					Me.SendPropertyChanged("VatRate")
					Me.OnVatRateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descr", DbType:="NVarChar(50)")>  _
		Public Property Descr() As String
			Get
				Return Me._Descr
			End Get
			Set
				If (String.Equals(Me._Descr, value) = false) Then
					Me.OnDescrChanging(value)
					Me.SendPropertyChanging
					Me._Descr = value
					Me.SendPropertyChanged("Descr")
					Me.OnDescrChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EffectiveDate", DbType:="DateTime NOT NULL", IsPrimaryKey:=true)>  _
		Public Property EffectiveDate() As Date
			Get
				Return Me._EffectiveDate
			End Get
			Set
				If ((Me._EffectiveDate = value)  _
							= false) Then
					Me.OnEffectiveDateChanging(value)
					Me.SendPropertyChanging
					Me._EffectiveDate = value
					Me.SendPropertyChanged("EffectiveDate")
					Me.OnEffectiveDateChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TWK_Assemblies")>  _
	Partial Public Class TWK_Assembly
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _AssemblyID As Integer
		
		Private _TypeName As String
		
		Private _AssemblyPath As String
		
		Private _ClassName As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAssemblyIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnAssemblyIDChanged()
    End Sub
    Partial Private Sub OnTypeNameChanging(value As String)
    End Sub
    Partial Private Sub OnTypeNameChanged()
    End Sub
    Partial Private Sub OnAssemblyPathChanging(value As String)
    End Sub
    Partial Private Sub OnAssemblyPathChanged()
    End Sub
    Partial Private Sub OnClassNameChanging(value As String)
    End Sub
    Partial Private Sub OnClassNameChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AssemblyID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property AssemblyID() As Integer
			Get
				Return Me._AssemblyID
			End Get
			Set
				If ((Me._AssemblyID = value)  _
							= false) Then
					Me.OnAssemblyIDChanging(value)
					Me.SendPropertyChanging
					Me._AssemblyID = value
					Me.SendPropertyChanged("AssemblyID")
					Me.OnAssemblyIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeName", DbType:="VarChar(50)")>  _
		Public Property TypeName() As String
			Get
				Return Me._TypeName
			End Get
			Set
				If (String.Equals(Me._TypeName, value) = false) Then
					Me.OnTypeNameChanging(value)
					Me.SendPropertyChanging
					Me._TypeName = value
					Me.SendPropertyChanged("TypeName")
					Me.OnTypeNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AssemblyPath", DbType:="VarChar(500)")>  _
		Public Property AssemblyPath() As String
			Get
				Return Me._AssemblyPath
			End Get
			Set
				If (String.Equals(Me._AssemblyPath, value) = false) Then
					Me.OnAssemblyPathChanging(value)
					Me.SendPropertyChanging
					Me._AssemblyPath = value
					Me.SendPropertyChanged("AssemblyPath")
					Me.OnAssemblyPathChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClassName", DbType:="VarChar(100)")>  _
		Public Property ClassName() As String
			Get
				Return Me._ClassName
			End Get
			Set
				If (String.Equals(Me._ClassName, value) = false) Then
					Me.OnClassNameChanging(value)
					Me.SendPropertyChanging
					Me._ClassName = value
					Me.SendPropertyChanged("ClassName")
					Me.OnClassNameChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TWK_RunProcedures")>  _
	Partial Public Class TWK_RunProcedure
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _procedureID As Integer
		
		Private _name As String
		
		Private _source As String
		
		Private _priority As System.Nullable(Of Integer)
		
		Private _currentstatus As String
		
		Private _procsXML As System.Xml.Linq.XElement
		
		Private _maxretrys As System.Nullable(Of Integer)
		
		Private _IsComplete As System.Nullable(Of Boolean)
		
		Private _StartedOn As System.Nullable(Of Date)
		
		Private _CompletedOn As System.Nullable(Of Date)
		
		Private _ErrorCount As System.Nullable(Of Integer)
		
		Private _ProcessingBy As String
		
		Private _IsProcessing As System.Nullable(Of Boolean)
		
		Private _HostName As String
		
		Private _IPAddress As String
		
		Private _Comments As String
		
		Private _AddedBy As String
		
		Private _AddedOn As System.Nullable(Of Date)
		
		Private _TrackingNumber As String
		
		Private _TrackingNumberType As System.Nullable(Of Integer)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnprocedureIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnprocedureIDChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnsourceChanging(value As String)
    End Sub
    Partial Private Sub OnsourceChanged()
    End Sub
    Partial Private Sub OnpriorityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnpriorityChanged()
    End Sub
    Partial Private Sub OncurrentstatusChanging(value As String)
    End Sub
    Partial Private Sub OncurrentstatusChanged()
    End Sub
    Partial Private Sub OnprocsXMLChanging(value As System.Xml.Linq.XElement)
    End Sub
    Partial Private Sub OnprocsXMLChanged()
    End Sub
    Partial Private Sub OnmaxretrysChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnmaxretrysChanged()
    End Sub
    Partial Private Sub OnIsCompleteChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsCompleteChanged()
    End Sub
    Partial Private Sub OnStartedOnChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartedOnChanged()
    End Sub
    Partial Private Sub OnCompletedOnChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCompletedOnChanged()
    End Sub
    Partial Private Sub OnErrorCountChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnErrorCountChanged()
    End Sub
    Partial Private Sub OnProcessingByChanging(value As String)
    End Sub
    Partial Private Sub OnProcessingByChanged()
    End Sub
    Partial Private Sub OnIsProcessingChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsProcessingChanged()
    End Sub
    Partial Private Sub OnHostNameChanging(value As String)
    End Sub
    Partial Private Sub OnHostNameChanged()
    End Sub
    Partial Private Sub OnIPAddressChanging(value As String)
    End Sub
    Partial Private Sub OnIPAddressChanged()
    End Sub
    Partial Private Sub OnCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnCommentsChanged()
    End Sub
    Partial Private Sub OnAddedByChanging(value As String)
    End Sub
    Partial Private Sub OnAddedByChanged()
    End Sub
    Partial Private Sub OnAddedOnChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnAddedOnChanged()
    End Sub
    Partial Private Sub OnTrackingNumberChanging(value As String)
    End Sub
    Partial Private Sub OnTrackingNumberChanged()
    End Sub
    Partial Private Sub OnTrackingNumberTypeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTrackingNumberTypeChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_procedureID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property procedureID() As Integer
			Get
				Return Me._procedureID
			End Get
			Set
				If ((Me._procedureID = value)  _
							= false) Then
					Me.OnprocedureIDChanging(value)
					Me.SendPropertyChanging
					Me._procedureID = value
					Me.SendPropertyChanged("procedureID")
					Me.OnprocedureIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(50)")>  _
		Public Property name() As String
			Get
				Return Me._name
			End Get
			Set
				If (String.Equals(Me._name, value) = false) Then
					Me.OnnameChanging(value)
					Me.SendPropertyChanging
					Me._name = value
					Me.SendPropertyChanged("name")
					Me.OnnameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_source", DbType:="VarChar(50)")>  _
		Public Property source() As String
			Get
				Return Me._source
			End Get
			Set
				If (String.Equals(Me._source, value) = false) Then
					Me.OnsourceChanging(value)
					Me.SendPropertyChanging
					Me._source = value
					Me.SendPropertyChanged("source")
					Me.OnsourceChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_priority", DbType:="Int")>  _
		Public Property priority() As System.Nullable(Of Integer)
			Get
				Return Me._priority
			End Get
			Set
				If (Me._priority.Equals(value) = false) Then
					Me.OnpriorityChanging(value)
					Me.SendPropertyChanging
					Me._priority = value
					Me.SendPropertyChanged("priority")
					Me.OnpriorityChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_currentstatus", DbType:="VarChar(50)")>  _
		Public Property currentstatus() As String
			Get
				Return Me._currentstatus
			End Get
			Set
				If (String.Equals(Me._currentstatus, value) = false) Then
					Me.OncurrentstatusChanging(value)
					Me.SendPropertyChanging
					Me._currentstatus = value
					Me.SendPropertyChanged("currentstatus")
					Me.OncurrentstatusChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_procsXML", DbType:="Xml", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property procsXML() As System.Xml.Linq.XElement
			Get
				Return Me._procsXML
			End Get
			Set
				If (Object.Equals(Me._procsXML, value) = false) Then
					Me.OnprocsXMLChanging(value)
					Me.SendPropertyChanging
					Me._procsXML = value
					Me.SendPropertyChanged("procsXML")
					Me.OnprocsXMLChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_maxretrys", DbType:="Int")>  _
		Public Property maxretrys() As System.Nullable(Of Integer)
			Get
				Return Me._maxretrys
			End Get
			Set
				If (Me._maxretrys.Equals(value) = false) Then
					Me.OnmaxretrysChanging(value)
					Me.SendPropertyChanging
					Me._maxretrys = value
					Me.SendPropertyChanged("maxretrys")
					Me.OnmaxretrysChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsComplete", DbType:="Bit")>  _
		Public Property IsComplete() As System.Nullable(Of Boolean)
			Get
				Return Me._IsComplete
			End Get
			Set
				If (Me._IsComplete.Equals(value) = false) Then
					Me.OnIsCompleteChanging(value)
					Me.SendPropertyChanging
					Me._IsComplete = value
					Me.SendPropertyChanged("IsComplete")
					Me.OnIsCompleteChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartedOn", DbType:="DateTime")>  _
		Public Property StartedOn() As System.Nullable(Of Date)
			Get
				Return Me._StartedOn
			End Get
			Set
				If (Me._StartedOn.Equals(value) = false) Then
					Me.OnStartedOnChanging(value)
					Me.SendPropertyChanging
					Me._StartedOn = value
					Me.SendPropertyChanged("StartedOn")
					Me.OnStartedOnChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompletedOn", DbType:="DateTime")>  _
		Public Property CompletedOn() As System.Nullable(Of Date)
			Get
				Return Me._CompletedOn
			End Get
			Set
				If (Me._CompletedOn.Equals(value) = false) Then
					Me.OnCompletedOnChanging(value)
					Me.SendPropertyChanging
					Me._CompletedOn = value
					Me.SendPropertyChanged("CompletedOn")
					Me.OnCompletedOnChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ErrorCount", DbType:="Int")>  _
		Public Property ErrorCount() As System.Nullable(Of Integer)
			Get
				Return Me._ErrorCount
			End Get
			Set
				If (Me._ErrorCount.Equals(value) = false) Then
					Me.OnErrorCountChanging(value)
					Me.SendPropertyChanging
					Me._ErrorCount = value
					Me.SendPropertyChanged("ErrorCount")
					Me.OnErrorCountChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProcessingBy", DbType:="VarChar(50)")>  _
		Public Property ProcessingBy() As String
			Get
				Return Me._ProcessingBy
			End Get
			Set
				If (String.Equals(Me._ProcessingBy, value) = false) Then
					Me.OnProcessingByChanging(value)
					Me.SendPropertyChanging
					Me._ProcessingBy = value
					Me.SendPropertyChanged("ProcessingBy")
					Me.OnProcessingByChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsProcessing", DbType:="Bit")>  _
		Public Property IsProcessing() As System.Nullable(Of Boolean)
			Get
				Return Me._IsProcessing
			End Get
			Set
				If (Me._IsProcessing.Equals(value) = false) Then
					Me.OnIsProcessingChanging(value)
					Me.SendPropertyChanging
					Me._IsProcessing = value
					Me.SendPropertyChanged("IsProcessing")
					Me.OnIsProcessingChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HostName", DbType:="VarChar(50)")>  _
		Public Property HostName() As String
			Get
				Return Me._HostName
			End Get
			Set
				If (String.Equals(Me._HostName, value) = false) Then
					Me.OnHostNameChanging(value)
					Me.SendPropertyChanging
					Me._HostName = value
					Me.SendPropertyChanged("HostName")
					Me.OnHostNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IPAddress", DbType:="VarChar(50)")>  _
		Public Property IPAddress() As String
			Get
				Return Me._IPAddress
			End Get
			Set
				If (String.Equals(Me._IPAddress, value) = false) Then
					Me.OnIPAddressChanging(value)
					Me.SendPropertyChanging
					Me._IPAddress = value
					Me.SendPropertyChanged("IPAddress")
					Me.OnIPAddressChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comments", DbType:="VarChar(255)")>  _
		Public Property Comments() As String
			Get
				Return Me._Comments
			End Get
			Set
				If (String.Equals(Me._Comments, value) = false) Then
					Me.OnCommentsChanging(value)
					Me.SendPropertyChanging
					Me._Comments = value
					Me.SendPropertyChanged("Comments")
					Me.OnCommentsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedBy", DbType:="VarChar(50)")>  _
		Public Property AddedBy() As String
			Get
				Return Me._AddedBy
			End Get
			Set
				If (String.Equals(Me._AddedBy, value) = false) Then
					Me.OnAddedByChanging(value)
					Me.SendPropertyChanging
					Me._AddedBy = value
					Me.SendPropertyChanged("AddedBy")
					Me.OnAddedByChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedOn", DbType:="DateTime")>  _
		Public Property AddedOn() As System.Nullable(Of Date)
			Get
				Return Me._AddedOn
			End Get
			Set
				If (Me._AddedOn.Equals(value) = false) Then
					Me.OnAddedOnChanging(value)
					Me.SendPropertyChanging
					Me._AddedOn = value
					Me.SendPropertyChanged("AddedOn")
					Me.OnAddedOnChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TrackingNumber", DbType:="VarChar(50)")>  _
		Public Property TrackingNumber() As String
			Get
				Return Me._TrackingNumber
			End Get
			Set
				If (String.Equals(Me._TrackingNumber, value) = false) Then
					Me.OnTrackingNumberChanging(value)
					Me.SendPropertyChanging
					Me._TrackingNumber = value
					Me.SendPropertyChanged("TrackingNumber")
					Me.OnTrackingNumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TrackingNumberType", DbType:="Int")>  _
		Public Property TrackingNumberType() As System.Nullable(Of Integer)
			Get
				Return Me._TrackingNumberType
			End Get
			Set
				If (Me._TrackingNumberType.Equals(value) = false) Then
					Me.OnTrackingNumberTypeChanging(value)
					Me.SendPropertyChanging
					Me._TrackingNumberType = value
					Me.SendPropertyChanged("TrackingNumberType")
					Me.OnTrackingNumberTypeChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APPROVALS_STATUSNAMES")>  _
	Partial Public Class APPROVALS_STATUSNAME
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _StatusID As Integer
		
		Private _Description As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStatusIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnStatusIDChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StatusID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property StatusID() As Integer
			Get
				Return Me._StatusID
			End Get
			Set
				If ((Me._StatusID = value)  _
							= false) Then
					Me.OnStatusIDChanging(value)
					Me.SendPropertyChanging
					Me._StatusID = value
					Me.SendPropertyChanged("StatusID")
					Me.OnStatusIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(50)")>  _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set
				If (String.Equals(Me._Description, value) = false) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APPROVALS_RQ")>  _
	Partial Public Class APPROVALS_RQ
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ApprovalID As System.Guid
		
		Private _LOAID As System.Nullable(Of System.Guid)
		
		Private _DocID As System.Nullable(Of Integer)
		
		Private _StatusID As System.Nullable(Of Integer)
		
		Private _Comment As String
		
		Private _Sequence As System.Nullable(Of Integer)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApprovalIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApprovalIDChanged()
    End Sub
    Partial Private Sub OnLOAIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnLOAIDChanged()
    End Sub
    Partial Private Sub OnDocIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDocIDChanged()
    End Sub
    Partial Private Sub OnStatusIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStatusIDChanged()
    End Sub
    Partial Private Sub OnCommentChanging(value As String)
    End Sub
    Partial Private Sub OnCommentChanged()
    End Sub
    Partial Private Sub OnSequenceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSequenceChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApprovalID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
		Public Property ApprovalID() As System.Guid
			Get
				Return Me._ApprovalID
			End Get
			Set
				If ((Me._ApprovalID = value)  _
							= false) Then
					Me.OnApprovalIDChanging(value)
					Me.SendPropertyChanging
					Me._ApprovalID = value
					Me.SendPropertyChanged("ApprovalID")
					Me.OnApprovalIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LOAID", DbType:="UniqueIdentifier")>  _
		Public Property LOAID() As System.Nullable(Of System.Guid)
			Get
				Return Me._LOAID
			End Get
			Set
				If (Me._LOAID.Equals(value) = false) Then
					Me.OnLOAIDChanging(value)
					Me.SendPropertyChanging
					Me._LOAID = value
					Me.SendPropertyChanged("LOAID")
					Me.OnLOAIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocID", DbType:="Int")>  _
		Public Property DocID() As System.Nullable(Of Integer)
			Get
				Return Me._DocID
			End Get
			Set
				If (Me._DocID.Equals(value) = false) Then
					Me.OnDocIDChanging(value)
					Me.SendPropertyChanging
					Me._DocID = value
					Me.SendPropertyChanged("DocID")
					Me.OnDocIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StatusID", DbType:="Int")>  _
		Public Property StatusID() As System.Nullable(Of Integer)
			Get
				Return Me._StatusID
			End Get
			Set
				If (Me._StatusID.Equals(value) = false) Then
					Me.OnStatusIDChanging(value)
					Me.SendPropertyChanging
					Me._StatusID = value
					Me.SendPropertyChanged("StatusID")
					Me.OnStatusIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comment", DbType:="VarChar(50)")>  _
		Public Property Comment() As String
			Get
				Return Me._Comment
			End Get
			Set
				If (String.Equals(Me._Comment, value) = false) Then
					Me.OnCommentChanging(value)
					Me.SendPropertyChanging
					Me._Comment = value
					Me.SendPropertyChanged("Comment")
					Me.OnCommentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sequence", DbType:="Int")>  _
		Public Property Sequence() As System.Nullable(Of Integer)
			Get
				Return Me._Sequence
			End Get
			Set
				If (Me._Sequence.Equals(value) = false) Then
					Me.OnSequenceChanging(value)
					Me.SendPropertyChanging
					Me._Sequence = value
					Me.SendPropertyChanged("Sequence")
					Me.OnSequenceChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_CHECKS")>  _
	Partial Public Class AP_CHECK
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _CheckID As System.Guid
		
		Private _Vendor_Number As String
		
		Private _Vend_Loc As String
		
		Private _Vend_Name As String
		
		Private _ICN_Num As String
		
		Private _Check_Number As String
		
		Private _Check_Amount As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCheckIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnCheckIDChanged()
    End Sub
    Partial Private Sub OnVendor_NumberChanging(value As String)
    End Sub
    Partial Private Sub OnVendor_NumberChanged()
    End Sub
    Partial Private Sub OnVend_LocChanging(value As String)
    End Sub
    Partial Private Sub OnVend_LocChanged()
    End Sub
    Partial Private Sub OnVend_NameChanging(value As String)
    End Sub
    Partial Private Sub OnVend_NameChanged()
    End Sub
    Partial Private Sub OnICN_NumChanging(value As String)
    End Sub
    Partial Private Sub OnICN_NumChanged()
    End Sub
    Partial Private Sub OnCheck_NumberChanging(value As String)
    End Sub
    Partial Private Sub OnCheck_NumberChanged()
    End Sub
    Partial Private Sub OnCheck_AmountChanging(value As String)
    End Sub
    Partial Private Sub OnCheck_AmountChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CheckID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
		Public Property CheckID() As System.Guid
			Get
				Return Me._CheckID
			End Get
			Set
				If ((Me._CheckID = value)  _
							= false) Then
					Me.OnCheckIDChanging(value)
					Me.SendPropertyChanging
					Me._CheckID = value
					Me.SendPropertyChanged("CheckID")
					Me.OnCheckIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vendor_Number", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
		Public Property Vendor_Number() As String
			Get
				Return Me._Vendor_Number
			End Get
			Set
				If (String.Equals(Me._Vendor_Number, value) = false) Then
					Me.OnVendor_NumberChanging(value)
					Me.SendPropertyChanging
					Me._Vendor_Number = value
					Me.SendPropertyChanged("Vendor_Number")
					Me.OnVendor_NumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vend_Loc", DbType:="VarChar(6) NOT NULL", CanBeNull:=false)>  _
		Public Property Vend_Loc() As String
			Get
				Return Me._Vend_Loc
			End Get
			Set
				If (String.Equals(Me._Vend_Loc, value) = false) Then
					Me.OnVend_LocChanging(value)
					Me.SendPropertyChanging
					Me._Vend_Loc = value
					Me.SendPropertyChanged("Vend_Loc")
					Me.OnVend_LocChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vend_Name", DbType:="VarChar(35) NOT NULL", CanBeNull:=false)>  _
		Public Property Vend_Name() As String
			Get
				Return Me._Vend_Name
			End Get
			Set
				If (String.Equals(Me._Vend_Name, value) = false) Then
					Me.OnVend_NameChanging(value)
					Me.SendPropertyChanging
					Me._Vend_Name = value
					Me.SendPropertyChanged("Vend_Name")
					Me.OnVend_NameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ICN_Num", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property ICN_Num() As String
			Get
				Return Me._ICN_Num
			End Get
			Set
				If (String.Equals(Me._ICN_Num, value) = false) Then
					Me.OnICN_NumChanging(value)
					Me.SendPropertyChanging
					Me._ICN_Num = value
					Me.SendPropertyChanged("ICN_Num")
					Me.OnICN_NumChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Check_Number", DbType:="VarChar(8) NOT NULL", CanBeNull:=false)>  _
		Public Property Check_Number() As String
			Get
				Return Me._Check_Number
			End Get
			Set
				If (String.Equals(Me._Check_Number, value) = false) Then
					Me.OnCheck_NumberChanging(value)
					Me.SendPropertyChanging
					Me._Check_Number = value
					Me.SendPropertyChanged("Check_Number")
					Me.OnCheck_NumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Check_Amount", DbType:="VarChar(14) NOT NULL", CanBeNull:=false)>  _
		Public Property Check_Amount() As String
			Get
				Return Me._Check_Amount
			End Get
			Set
				If (String.Equals(Me._Check_Amount, value) = false) Then
					Me.OnCheck_AmountChanging(value)
					Me.SendPropertyChanging
					Me._Check_Amount = value
					Me.SendPropertyChanged("Check_Amount")
					Me.OnCheck_AmountChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_PPR_DETAIL")>  _
	Partial Public Class AP_PPR_DETAIL
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _pprDetailID As Integer
		
		Private _pprHeaderID As Integer
		
		Private _VendorNumber As String
		
		Private _VendLoc As String
		
		Private _VendName As String
		
		Private _CCN As String
		
		Private _ICNNumber As String
		
		Private _AP_Inv_Number As String
		
		Private _AP_Doc_Date As String
		
		Private _Net_Due_Date As String
		
		Private _Total_ICN_Amount As String
		
		Private _Amount_To_Pay As String
		
		Private _Disc_Amount As String
		
		Private _ACH_Check As String
		
		Private _PPRStatusID As System.Nullable(Of Integer)
		
		Private _StatusChangedOn As System.Nullable(Of Date)
		
		Private _ChangedBy As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnpprDetailIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnpprDetailIDChanged()
    End Sub
    Partial Private Sub OnpprHeaderIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnpprHeaderIDChanged()
    End Sub
    Partial Private Sub OnVendorNumberChanging(value As String)
    End Sub
    Partial Private Sub OnVendorNumberChanged()
    End Sub
    Partial Private Sub OnVendLocChanging(value As String)
    End Sub
    Partial Private Sub OnVendLocChanged()
    End Sub
    Partial Private Sub OnVendNameChanging(value As String)
    End Sub
    Partial Private Sub OnVendNameChanged()
    End Sub
    Partial Private Sub OnCCNChanging(value As String)
    End Sub
    Partial Private Sub OnCCNChanged()
    End Sub
    Partial Private Sub OnICNNumberChanging(value As String)
    End Sub
    Partial Private Sub OnICNNumberChanged()
    End Sub
    Partial Private Sub OnAP_Inv_NumberChanging(value As String)
    End Sub
    Partial Private Sub OnAP_Inv_NumberChanged()
    End Sub
    Partial Private Sub OnAP_Doc_DateChanging(value As String)
    End Sub
    Partial Private Sub OnAP_Doc_DateChanged()
    End Sub
    Partial Private Sub OnNet_Due_DateChanging(value As String)
    End Sub
    Partial Private Sub OnNet_Due_DateChanged()
    End Sub
    Partial Private Sub OnTotal_ICN_AmountChanging(value As String)
    End Sub
    Partial Private Sub OnTotal_ICN_AmountChanged()
    End Sub
    Partial Private Sub OnAmount_To_PayChanging(value As String)
    End Sub
    Partial Private Sub OnAmount_To_PayChanged()
    End Sub
    Partial Private Sub OnDisc_AmountChanging(value As String)
    End Sub
    Partial Private Sub OnDisc_AmountChanged()
    End Sub
    Partial Private Sub OnACH_CheckChanging(value As String)
    End Sub
    Partial Private Sub OnACH_CheckChanged()
    End Sub
    Partial Private Sub OnPPRStatusIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPPRStatusIDChanged()
    End Sub
    Partial Private Sub OnStatusChangedOnChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStatusChangedOnChanged()
    End Sub
    Partial Private Sub OnChangedByChanging(value As String)
    End Sub
    Partial Private Sub OnChangedByChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pprDetailID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property pprDetailID() As Integer
			Get
				Return Me._pprDetailID
			End Get
			Set
				If ((Me._pprDetailID = value)  _
							= false) Then
					Me.OnpprDetailIDChanging(value)
					Me.SendPropertyChanging
					Me._pprDetailID = value
					Me.SendPropertyChanged("pprDetailID")
					Me.OnpprDetailIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pprHeaderID", DbType:="Int NOT NULL")>  _
		Public Property pprHeaderID() As Integer
			Get
				Return Me._pprHeaderID
			End Get
			Set
				If ((Me._pprHeaderID = value)  _
							= false) Then
					Me.OnpprHeaderIDChanging(value)
					Me.SendPropertyChanging
					Me._pprHeaderID = value
					Me.SendPropertyChanged("pprHeaderID")
					Me.OnpprHeaderIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VendorNumber", DbType:="VarChar(10)")>  _
		Public Property VendorNumber() As String
			Get
				Return Me._VendorNumber
			End Get
			Set
				If (String.Equals(Me._VendorNumber, value) = false) Then
					Me.OnVendorNumberChanging(value)
					Me.SendPropertyChanging
					Me._VendorNumber = value
					Me.SendPropertyChanged("VendorNumber")
					Me.OnVendorNumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VendLoc", DbType:="VarChar(10)")>  _
		Public Property VendLoc() As String
			Get
				Return Me._VendLoc
			End Get
			Set
				If (String.Equals(Me._VendLoc, value) = false) Then
					Me.OnVendLocChanging(value)
					Me.SendPropertyChanging
					Me._VendLoc = value
					Me.SendPropertyChanged("VendLoc")
					Me.OnVendLocChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VendName", DbType:="VarChar(45)")>  _
		Public Property VendName() As String
			Get
				Return Me._VendName
			End Get
			Set
				If (String.Equals(Me._VendName, value) = false) Then
					Me.OnVendNameChanging(value)
					Me.SendPropertyChanging
					Me._VendName = value
					Me.SendPropertyChanged("VendName")
					Me.OnVendNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCN", DbType:="VarChar(10)")>  _
		Public Property CCN() As String
			Get
				Return Me._CCN
			End Get
			Set
				If (String.Equals(Me._CCN, value) = false) Then
					Me.OnCCNChanging(value)
					Me.SendPropertyChanging
					Me._CCN = value
					Me.SendPropertyChanged("CCN")
					Me.OnCCNChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ICNNumber", DbType:="VarChar(20)")>  _
		Public Property ICNNumber() As String
			Get
				Return Me._ICNNumber
			End Get
			Set
				If (String.Equals(Me._ICNNumber, value) = false) Then
					Me.OnICNNumberChanging(value)
					Me.SendPropertyChanging
					Me._ICNNumber = value
					Me.SendPropertyChanged("ICNNumber")
					Me.OnICNNumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AP_Inv_Number", DbType:="VarChar(20)")>  _
		Public Property AP_Inv_Number() As String
			Get
				Return Me._AP_Inv_Number
			End Get
			Set
				If (String.Equals(Me._AP_Inv_Number, value) = false) Then
					Me.OnAP_Inv_NumberChanging(value)
					Me.SendPropertyChanging
					Me._AP_Inv_Number = value
					Me.SendPropertyChanged("AP_Inv_Number")
					Me.OnAP_Inv_NumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AP_Doc_Date", DbType:="VarChar(20)")>  _
		Public Property AP_Doc_Date() As String
			Get
				Return Me._AP_Doc_Date
			End Get
			Set
				If (String.Equals(Me._AP_Doc_Date, value) = false) Then
					Me.OnAP_Doc_DateChanging(value)
					Me.SendPropertyChanging
					Me._AP_Doc_Date = value
					Me.SendPropertyChanged("AP_Doc_Date")
					Me.OnAP_Doc_DateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Net_Due_Date", DbType:="VarChar(20)")>  _
		Public Property Net_Due_Date() As String
			Get
				Return Me._Net_Due_Date
			End Get
			Set
				If (String.Equals(Me._Net_Due_Date, value) = false) Then
					Me.OnNet_Due_DateChanging(value)
					Me.SendPropertyChanging
					Me._Net_Due_Date = value
					Me.SendPropertyChanged("Net_Due_Date")
					Me.OnNet_Due_DateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total_ICN_Amount", DbType:="VarChar(20)")>  _
		Public Property Total_ICN_Amount() As String
			Get
				Return Me._Total_ICN_Amount
			End Get
			Set
				If (String.Equals(Me._Total_ICN_Amount, value) = false) Then
					Me.OnTotal_ICN_AmountChanging(value)
					Me.SendPropertyChanging
					Me._Total_ICN_Amount = value
					Me.SendPropertyChanged("Total_ICN_Amount")
					Me.OnTotal_ICN_AmountChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount_To_Pay", DbType:="VarChar(20)")>  _
		Public Property Amount_To_Pay() As String
			Get
				Return Me._Amount_To_Pay
			End Get
			Set
				If (String.Equals(Me._Amount_To_Pay, value) = false) Then
					Me.OnAmount_To_PayChanging(value)
					Me.SendPropertyChanging
					Me._Amount_To_Pay = value
					Me.SendPropertyChanged("Amount_To_Pay")
					Me.OnAmount_To_PayChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Disc_Amount", DbType:="VarChar(20)")>  _
		Public Property Disc_Amount() As String
			Get
				Return Me._Disc_Amount
			End Get
			Set
				If (String.Equals(Me._Disc_Amount, value) = false) Then
					Me.OnDisc_AmountChanging(value)
					Me.SendPropertyChanging
					Me._Disc_Amount = value
					Me.SendPropertyChanged("Disc_Amount")
					Me.OnDisc_AmountChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACH_Check", DbType:="VarChar(1)")>  _
		Public Property ACH_Check() As String
			Get
				Return Me._ACH_Check
			End Get
			Set
				If (String.Equals(Me._ACH_Check, value) = false) Then
					Me.OnACH_CheckChanging(value)
					Me.SendPropertyChanging
					Me._ACH_Check = value
					Me.SendPropertyChanged("ACH_Check")
					Me.OnACH_CheckChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PPRStatusID", DbType:="Int")>  _
		Public Property PPRStatusID() As System.Nullable(Of Integer)
			Get
				Return Me._PPRStatusID
			End Get
			Set
				If (Me._PPRStatusID.Equals(value) = false) Then
					Me.OnPPRStatusIDChanging(value)
					Me.SendPropertyChanging
					Me._PPRStatusID = value
					Me.SendPropertyChanged("PPRStatusID")
					Me.OnPPRStatusIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StatusChangedOn", DbType:="DateTime")>  _
		Public Property StatusChangedOn() As System.Nullable(Of Date)
			Get
				Return Me._StatusChangedOn
			End Get
			Set
				If (Me._StatusChangedOn.Equals(value) = false) Then
					Me.OnStatusChangedOnChanging(value)
					Me.SendPropertyChanging
					Me._StatusChangedOn = value
					Me.SendPropertyChanged("StatusChangedOn")
					Me.OnStatusChangedOnChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChangedBy", DbType:="VarChar(50)")>  _
		Public Property ChangedBy() As String
			Get
				Return Me._ChangedBy
			End Get
			Set
				If (String.Equals(Me._ChangedBy, value) = false) Then
					Me.OnChangedByChanging(value)
					Me.SendPropertyChanging
					Me._ChangedBy = value
					Me.SendPropertyChanged("ChangedBy")
					Me.OnChangedByChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_CCN_TRANSLATION")>  _
	Partial Public Class AP_CCN_TRANSLATION
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _CCNID As String
		
		Private _Literal As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCCNIDChanging(value As String)
    End Sub
    Partial Private Sub OnCCNIDChanged()
    End Sub
    Partial Private Sub OnLiteralChanging(value As String)
    End Sub
    Partial Private Sub OnLiteralChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCNID", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property CCNID() As String
			Get
				Return Me._CCNID
			End Get
			Set
				If (String.Equals(Me._CCNID, value) = false) Then
					Me.OnCCNIDChanging(value)
					Me.SendPropertyChanging
					Me._CCNID = value
					Me.SendPropertyChanged("CCNID")
					Me.OnCCNIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Literal", DbType:="VarChar(30)")>  _
		Public Property Literal() As String
			Get
				Return Me._Literal
			End Get
			Set
				If (String.Equals(Me._Literal, value) = false) Then
					Me.OnLiteralChanging(value)
					Me.SendPropertyChanging
					Me._Literal = value
					Me.SendPropertyChanged("Literal")
					Me.OnLiteralChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APPROVAL_LOA")>  _
	Partial Public Class APPROVAL_LOA
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _LOAID As System.Guid
		
		Private _CostCentre As String
		
		Private _Department As String
		
		Private _ApproverName As String
		
		Private _SignOffLimit As System.Nullable(Of Decimal)
		
		Private _DLX_Login As String
		
		Private _Email1 As String
		
		Private _Email2 As String
		
		Private _NumApprovers As System.Nullable(Of Integer)
		
		Private _AutoEscalate As System.Nullable(Of Integer)
		
		Private _ApprovalOrder As System.Nullable(Of Integer)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLOAIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnLOAIDChanged()
    End Sub
    Partial Private Sub OnCostCentreChanging(value As String)
    End Sub
    Partial Private Sub OnCostCentreChanged()
    End Sub
    Partial Private Sub OnDepartmentChanging(value As String)
    End Sub
    Partial Private Sub OnDepartmentChanged()
    End Sub
    Partial Private Sub OnApproverNameChanging(value As String)
    End Sub
    Partial Private Sub OnApproverNameChanged()
    End Sub
    Partial Private Sub OnSignOffLimitChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnSignOffLimitChanged()
    End Sub
    Partial Private Sub OnDLX_LoginChanging(value As String)
    End Sub
    Partial Private Sub OnDLX_LoginChanged()
    End Sub
    Partial Private Sub OnEmail1Changing(value As String)
    End Sub
    Partial Private Sub OnEmail1Changed()
    End Sub
    Partial Private Sub OnEmail2Changing(value As String)
    End Sub
    Partial Private Sub OnEmail2Changed()
    End Sub
    Partial Private Sub OnNumApproversChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumApproversChanged()
    End Sub
    Partial Private Sub OnAutoEscalateChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAutoEscalateChanged()
    End Sub
    Partial Private Sub OnApprovalOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnApprovalOrderChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LOAID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
		Public Property LOAID() As System.Guid
			Get
				Return Me._LOAID
			End Get
			Set
				If ((Me._LOAID = value)  _
							= false) Then
					Me.OnLOAIDChanging(value)
					Me.SendPropertyChanging
					Me._LOAID = value
					Me.SendPropertyChanged("LOAID")
					Me.OnLOAIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CostCentre", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property CostCentre() As String
			Get
				Return Me._CostCentre
			End Get
			Set
				If (String.Equals(Me._CostCentre, value) = false) Then
					Me.OnCostCentreChanging(value)
					Me.SendPropertyChanging
					Me._CostCentre = value
					Me.SendPropertyChanged("CostCentre")
					Me.OnCostCentreChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Department", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property Department() As String
			Get
				Return Me._Department
			End Get
			Set
				If (String.Equals(Me._Department, value) = false) Then
					Me.OnDepartmentChanging(value)
					Me.SendPropertyChanging
					Me._Department = value
					Me.SendPropertyChanged("Department")
					Me.OnDepartmentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApproverName", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
		Public Property ApproverName() As String
			Get
				Return Me._ApproverName
			End Get
			Set
				If (String.Equals(Me._ApproverName, value) = false) Then
					Me.OnApproverNameChanging(value)
					Me.SendPropertyChanging
					Me._ApproverName = value
					Me.SendPropertyChanged("ApproverName")
					Me.OnApproverNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SignOffLimit", DbType:="Decimal(18,2)")>  _
		Public Property SignOffLimit() As System.Nullable(Of Decimal)
			Get
				Return Me._SignOffLimit
			End Get
			Set
				If (Me._SignOffLimit.Equals(value) = false) Then
					Me.OnSignOffLimitChanging(value)
					Me.SendPropertyChanging
					Me._SignOffLimit = value
					Me.SendPropertyChanged("SignOffLimit")
					Me.OnSignOffLimitChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DLX_Login", DbType:="NVarChar(254)")>  _
		Public Property DLX_Login() As String
			Get
				Return Me._DLX_Login
			End Get
			Set
				If (String.Equals(Me._DLX_Login, value) = false) Then
					Me.OnDLX_LoginChanging(value)
					Me.SendPropertyChanging
					Me._DLX_Login = value
					Me.SendPropertyChanged("DLX_Login")
					Me.OnDLX_LoginChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email1", DbType:="NVarChar(254)")>  _
		Public Property Email1() As String
			Get
				Return Me._Email1
			End Get
			Set
				If (String.Equals(Me._Email1, value) = false) Then
					Me.OnEmail1Changing(value)
					Me.SendPropertyChanging
					Me._Email1 = value
					Me.SendPropertyChanged("Email1")
					Me.OnEmail1Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email2", DbType:="NVarChar(254)")>  _
		Public Property Email2() As String
			Get
				Return Me._Email2
			End Get
			Set
				If (String.Equals(Me._Email2, value) = false) Then
					Me.OnEmail2Changing(value)
					Me.SendPropertyChanging
					Me._Email2 = value
					Me.SendPropertyChanged("Email2")
					Me.OnEmail2Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumApprovers", DbType:="Int")>  _
		Public Property NumApprovers() As System.Nullable(Of Integer)
			Get
				Return Me._NumApprovers
			End Get
			Set
				If (Me._NumApprovers.Equals(value) = false) Then
					Me.OnNumApproversChanging(value)
					Me.SendPropertyChanging
					Me._NumApprovers = value
					Me.SendPropertyChanged("NumApprovers")
					Me.OnNumApproversChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AutoEscalate", DbType:="Int")>  _
		Public Property AutoEscalate() As System.Nullable(Of Integer)
			Get
				Return Me._AutoEscalate
			End Get
			Set
				If (Me._AutoEscalate.Equals(value) = false) Then
					Me.OnAutoEscalateChanging(value)
					Me.SendPropertyChanging
					Me._AutoEscalate = value
					Me.SendPropertyChanged("AutoEscalate")
					Me.OnAutoEscalateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApprovalOrder", DbType:="Int")>  _
		Public Property ApprovalOrder() As System.Nullable(Of Integer)
			Get
				Return Me._ApprovalOrder
			End Get
			Set
				If (Me._ApprovalOrder.Equals(value) = false) Then
					Me.OnApprovalOrderChanging(value)
					Me.SendPropertyChanging
					Me._ApprovalOrder = value
					Me.SendPropertyChanged("ApprovalOrder")
					Me.OnApprovalOrderChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_PPR_HEADER")>  _
	Partial Public Class AP_PPR_HEADER
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _pprHeaderID As Integer
		
		Private _RR As String
		
		Private _PPR As String
		
		Private _CCN As String
		
		Private _DocDate As String
		
		Private _FileName As String
		
		Private _AddedOn As System.Nullable(Of Date)
		
		Private _PPRStatusID As System.Nullable(Of Integer)
		
		Private _StatusChangedOn As System.Nullable(Of Date)
		
		Private _ChangedBy As String
		
		Private _DocID As System.Nullable(Of Integer)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnpprHeaderIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnpprHeaderIDChanged()
    End Sub
    Partial Private Sub OnRRChanging(value As String)
    End Sub
    Partial Private Sub OnRRChanged()
    End Sub
    Partial Private Sub OnPPRChanging(value As String)
    End Sub
    Partial Private Sub OnPPRChanged()
    End Sub
    Partial Private Sub OnCCNChanging(value As String)
    End Sub
    Partial Private Sub OnCCNChanged()
    End Sub
    Partial Private Sub OnDocDateChanging(value As String)
    End Sub
    Partial Private Sub OnDocDateChanged()
    End Sub
    Partial Private Sub OnFileNameChanging(value As String)
    End Sub
    Partial Private Sub OnFileNameChanged()
    End Sub
    Partial Private Sub OnAddedOnChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnAddedOnChanged()
    End Sub
    Partial Private Sub OnPPRStatusIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPPRStatusIDChanged()
    End Sub
    Partial Private Sub OnStatusChangedOnChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStatusChangedOnChanged()
    End Sub
    Partial Private Sub OnChangedByChanging(value As String)
    End Sub
    Partial Private Sub OnChangedByChanged()
    End Sub
    Partial Private Sub OnDocIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDocIDChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pprHeaderID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property pprHeaderID() As Integer
			Get
				Return Me._pprHeaderID
			End Get
			Set
				If ((Me._pprHeaderID = value)  _
							= false) Then
					Me.OnpprHeaderIDChanging(value)
					Me.SendPropertyChanging
					Me._pprHeaderID = value
					Me.SendPropertyChanged("pprHeaderID")
					Me.OnpprHeaderIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RR", DbType:="VarChar(20)")>  _
		Public Property RR() As String
			Get
				Return Me._RR
			End Get
			Set
				If (String.Equals(Me._RR, value) = false) Then
					Me.OnRRChanging(value)
					Me.SendPropertyChanging
					Me._RR = value
					Me.SendPropertyChanged("RR")
					Me.OnRRChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PPR", DbType:="VarChar(3)")>  _
		Public Property PPR() As String
			Get
				Return Me._PPR
			End Get
			Set
				If (String.Equals(Me._PPR, value) = false) Then
					Me.OnPPRChanging(value)
					Me.SendPropertyChanging
					Me._PPR = value
					Me.SendPropertyChanged("PPR")
					Me.OnPPRChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCN", DbType:="VarChar(6)")>  _
		Public Property CCN() As String
			Get
				Return Me._CCN
			End Get
			Set
				If (String.Equals(Me._CCN, value) = false) Then
					Me.OnCCNChanging(value)
					Me.SendPropertyChanging
					Me._CCN = value
					Me.SendPropertyChanged("CCN")
					Me.OnCCNChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocDate", DbType:="VarChar(20)")>  _
		Public Property DocDate() As String
			Get
				Return Me._DocDate
			End Get
			Set
				If (String.Equals(Me._DocDate, value) = false) Then
					Me.OnDocDateChanging(value)
					Me.SendPropertyChanging
					Me._DocDate = value
					Me.SendPropertyChanged("DocDate")
					Me.OnDocDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FileName", DbType:="VarChar(255)")>  _
		Public Property FileName() As String
			Get
				Return Me._FileName
			End Get
			Set
				If (String.Equals(Me._FileName, value) = false) Then
					Me.OnFileNameChanging(value)
					Me.SendPropertyChanging
					Me._FileName = value
					Me.SendPropertyChanged("FileName")
					Me.OnFileNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedOn", DbType:="DateTime")>  _
		Public Property AddedOn() As System.Nullable(Of Date)
			Get
				Return Me._AddedOn
			End Get
			Set
				If (Me._AddedOn.Equals(value) = false) Then
					Me.OnAddedOnChanging(value)
					Me.SendPropertyChanging
					Me._AddedOn = value
					Me.SendPropertyChanged("AddedOn")
					Me.OnAddedOnChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PPRStatusID", DbType:="Int")>  _
		Public Property PPRStatusID() As System.Nullable(Of Integer)
			Get
				Return Me._PPRStatusID
			End Get
			Set
				If (Me._PPRStatusID.Equals(value) = false) Then
					Me.OnPPRStatusIDChanging(value)
					Me.SendPropertyChanging
					Me._PPRStatusID = value
					Me.SendPropertyChanged("PPRStatusID")
					Me.OnPPRStatusIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StatusChangedOn", DbType:="DateTime")>  _
		Public Property StatusChangedOn() As System.Nullable(Of Date)
			Get
				Return Me._StatusChangedOn
			End Get
			Set
				If (Me._StatusChangedOn.Equals(value) = false) Then
					Me.OnStatusChangedOnChanging(value)
					Me.SendPropertyChanging
					Me._StatusChangedOn = value
					Me.SendPropertyChanged("StatusChangedOn")
					Me.OnStatusChangedOnChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChangedBy", DbType:="VarChar(50)")>  _
		Public Property ChangedBy() As String
			Get
				Return Me._ChangedBy
			End Get
			Set
				If (String.Equals(Me._ChangedBy, value) = false) Then
					Me.OnChangedByChanging(value)
					Me.SendPropertyChanging
					Me._ChangedBy = value
					Me.SendPropertyChanged("ChangedBy")
					Me.OnChangedByChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocID", DbType:="Int")>  _
		Public Property DocID() As System.Nullable(Of Integer)
			Get
				Return Me._DocID
			End Get
			Set
				If (Me._DocID.Equals(value) = false) Then
					Me.OnDocIDChanging(value)
					Me.SendPropertyChanging
					Me._DocID = value
					Me.SendPropertyChanged("DocID")
					Me.OnDocIDChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UDF4")>  _
	Partial Public Class UDF4
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _DOCCOPYID As Integer
		
		Private _DOCID As Integer
		
		Private _DRAWERID As Integer
		
		Private _FOLDERID As Integer
		
		Private _DOCTYPID As Integer
		
		Private _CREATEDATE As String
		
		Private _Note As String
		
		Private _NOTEX As String
		
		Private _OWNERID As Integer
		
		Private _GROUPID As Integer
		
		Private _WEBSECURED As Integer
		
		Private _LASTINDEX As System.Nullable(Of Date)
		
		Private _LASTINDEXSUCCESS As System.Nullable(Of Boolean)
		
		Private _LASTOCR As System.Nullable(Of Date)
		
		Private _LASTOCRSUCCESS As System.Nullable(Of Boolean)
		
		Private _SENTTOINDEX As System.Nullable(Of Date)
		
		Private _SENTTOOCR As System.Nullable(Of Date)
		
		Private _DocDate As String
		
		Private _VendorLocation As String
		
		Private _DocAmount As System.Nullable(Of Decimal)
		
		Private _ICN As String
		
		Private _PurOrderNumber As String
		
		Private _PurReqNumber As String
		
		Private _ReceiverNumber As String
		
		Private _PurReqOrig As String
		
		Private _Status As String
		
		Private _Location As String
		
		Private _CheckDate As String
		
		Private _Approver As String
		
		Private _LastWorkflow As String
		
		Private _CheckNumber As String
		
		Private _CostCentre As String
		
		Private _Department As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDOCCOPYIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDOCCOPYIDChanged()
    End Sub
    Partial Private Sub OnDOCIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDOCIDChanged()
    End Sub
    Partial Private Sub OnDRAWERIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDRAWERIDChanged()
    End Sub
    Partial Private Sub OnFOLDERIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFOLDERIDChanged()
    End Sub
    Partial Private Sub OnDOCTYPIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDOCTYPIDChanged()
    End Sub
    Partial Private Sub OnCREATEDATEChanging(value As String)
    End Sub
    Partial Private Sub OnCREATEDATEChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    Partial Private Sub OnNOTEXChanging(value As String)
    End Sub
    Partial Private Sub OnNOTEXChanged()
    End Sub
    Partial Private Sub OnOWNERIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOWNERIDChanged()
    End Sub
    Partial Private Sub OnGROUPIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnGROUPIDChanged()
    End Sub
    Partial Private Sub OnWEBSECUREDChanging(value As Integer)
    End Sub
    Partial Private Sub OnWEBSECUREDChanged()
    End Sub
    Partial Private Sub OnLASTINDEXChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLASTINDEXChanged()
    End Sub
    Partial Private Sub OnLASTINDEXSUCCESSChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnLASTINDEXSUCCESSChanged()
    End Sub
    Partial Private Sub OnLASTOCRChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLASTOCRChanged()
    End Sub
    Partial Private Sub OnLASTOCRSUCCESSChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnLASTOCRSUCCESSChanged()
    End Sub
    Partial Private Sub OnSENTTOINDEXChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnSENTTOINDEXChanged()
    End Sub
    Partial Private Sub OnSENTTOOCRChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnSENTTOOCRChanged()
    End Sub
    Partial Private Sub OnInvoiceNumberChanging(value As String)
    End Sub
    Partial Private Sub OnInvoiceNumberChanged()
    End Sub
    Partial Private Sub OnDocDateChanging(value As String)
    End Sub
    Partial Private Sub OnDocDateChanged()
    End Sub
    Partial Private Sub OnDocAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnDocAmountChanged()
    End Sub
    Partial Private Sub OnICNChanging(value As String)
    End Sub
    Partial Private Sub OnICNChanged()
    End Sub
    Partial Private Sub OnPurOrderNumberChanging(value As String)
    End Sub
    Partial Private Sub OnPurOrderNumberChanged()
    End Sub
    Partial Private Sub OnPurReqNumberChanging(value As String)
    End Sub
    Partial Private Sub OnPurReqNumberChanged()
    End Sub
    Partial Private Sub OnReceiverNumberChanging(value As String)
    End Sub
    Partial Private Sub OnReceiverNumberChanged()
    End Sub
    Partial Private Sub OnPurReqOrigChanging(value As String)
    End Sub
    Partial Private Sub OnPurReqOrigChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnLocationChanging(value As String)
    End Sub
    Partial Private Sub OnLocationChanged()
    End Sub
    Partial Private Sub OnCheckDateChanging(value As String)
    End Sub
    Partial Private Sub OnCheckDateChanged()
    End Sub
    Partial Private Sub OnApproverChanging(value As String)
    End Sub
    Partial Private Sub OnApproverChanged()
    End Sub
    Partial Private Sub OnLastWorkflowChanging(value As String)
    End Sub
    Partial Private Sub OnLastWorkflowChanged()
    End Sub
    Partial Private Sub OnCheckNumberChanging(value As String)
    End Sub
    Partial Private Sub OnCheckNumberChanged()
    End Sub
    Partial Private Sub OnCostCentreChanging(value As String)
    End Sub
    Partial Private Sub OnCostCentreChanged()
    End Sub
    Partial Private Sub OnDepartmentChanging(value As String)
    End Sub
    Partial Private Sub OnDepartmentChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DOCCOPYID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property DOCCOPYID() As Integer
			Get
				Return Me._DOCCOPYID
			End Get
			Set
				If ((Me._DOCCOPYID = value)  _
							= false) Then
					Me.OnDOCCOPYIDChanging(value)
					Me.SendPropertyChanging
					Me._DOCCOPYID = value
					Me.SendPropertyChanged("DOCCOPYID")
					Me.OnDOCCOPYIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DOCID", DbType:="Int NOT NULL")>  _
		Public Property DOCID() As Integer
			Get
				Return Me._DOCID
			End Get
			Set
				If ((Me._DOCID = value)  _
							= false) Then
					Me.OnDOCIDChanging(value)
					Me.SendPropertyChanging
					Me._DOCID = value
					Me.SendPropertyChanged("DOCID")
					Me.OnDOCIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DRAWERID", DbType:="Int NOT NULL")>  _
		Public Property DRAWERID() As Integer
			Get
				Return Me._DRAWERID
			End Get
			Set
				If ((Me._DRAWERID = value)  _
							= false) Then
					Me.OnDRAWERIDChanging(value)
					Me.SendPropertyChanging
					Me._DRAWERID = value
					Me.SendPropertyChanged("DRAWERID")
					Me.OnDRAWERIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FOLDERID", DbType:="Int NOT NULL")>  _
		Public Property FOLDERID() As Integer
			Get
				Return Me._FOLDERID
			End Get
			Set
				If ((Me._FOLDERID = value)  _
							= false) Then
					Me.OnFOLDERIDChanging(value)
					Me.SendPropertyChanging
					Me._FOLDERID = value
					Me.SendPropertyChanged("FOLDERID")
					Me.OnFOLDERIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DOCTYPID", DbType:="Int NOT NULL")>  _
		Public Property DOCTYPID() As Integer
			Get
				Return Me._DOCTYPID
			End Get
			Set
				If ((Me._DOCTYPID = value)  _
							= false) Then
					Me.OnDOCTYPIDChanging(value)
					Me.SendPropertyChanging
					Me._DOCTYPID = value
					Me.SendPropertyChanged("DOCTYPID")
					Me.OnDOCTYPIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CREATEDATE", DbType:="NVarChar(14)")>  _
		Public Property CREATEDATE() As String
			Get
				Return Me._CREATEDATE
			End Get
			Set
				If (String.Equals(Me._CREATEDATE, value) = false) Then
					Me.OnCREATEDATEChanging(value)
					Me.SendPropertyChanging
					Me._CREATEDATE = value
					Me.SendPropertyChanged("CREATEDATE")
					Me.OnCREATEDATEChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note", DbType:="NVarChar(255)")>  _
		Public Property Note() As String
			Get
				Return Me._Note
			End Get
			Set
				If (String.Equals(Me._Note, value) = false) Then
					Me.OnNoteChanging(value)
					Me.SendPropertyChanging
					Me._Note = value
					Me.SendPropertyChanged("Note")
					Me.OnNoteChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOTEX", DbType:="NVarChar(60)")>  _
		Public Property NOTEX() As String
			Get
				Return Me._NOTEX
			End Get
			Set
				If (String.Equals(Me._NOTEX, value) = false) Then
					Me.OnNOTEXChanging(value)
					Me.SendPropertyChanging
					Me._NOTEX = value
					Me.SendPropertyChanged("NOTEX")
					Me.OnNOTEXChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OWNERID", DbType:="Int NOT NULL")>  _
		Public Property OWNERID() As Integer
			Get
				Return Me._OWNERID
			End Get
			Set
				If ((Me._OWNERID = value)  _
							= false) Then
					Me.OnOWNERIDChanging(value)
					Me.SendPropertyChanging
					Me._OWNERID = value
					Me.SendPropertyChanged("OWNERID")
					Me.OnOWNERIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GROUPID", DbType:="Int NOT NULL")>  _
		Public Property GROUPID() As Integer
			Get
				Return Me._GROUPID
			End Get
			Set
				If ((Me._GROUPID = value)  _
							= false) Then
					Me.OnGROUPIDChanging(value)
					Me.SendPropertyChanging
					Me._GROUPID = value
					Me.SendPropertyChanged("GROUPID")
					Me.OnGROUPIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WEBSECURED", DbType:="Int NOT NULL")>  _
		Public Property WEBSECURED() As Integer
			Get
				Return Me._WEBSECURED
			End Get
			Set
				If ((Me._WEBSECURED = value)  _
							= false) Then
					Me.OnWEBSECUREDChanging(value)
					Me.SendPropertyChanging
					Me._WEBSECURED = value
					Me.SendPropertyChanged("WEBSECURED")
					Me.OnWEBSECUREDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LASTINDEX", DbType:="DateTime")>  _
		Public Property LASTINDEX() As System.Nullable(Of Date)
			Get
				Return Me._LASTINDEX
			End Get
			Set
				If (Me._LASTINDEX.Equals(value) = false) Then
					Me.OnLASTINDEXChanging(value)
					Me.SendPropertyChanging
					Me._LASTINDEX = value
					Me.SendPropertyChanged("LASTINDEX")
					Me.OnLASTINDEXChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LASTINDEXSUCCESS", DbType:="Bit")>  _
		Public Property LASTINDEXSUCCESS() As System.Nullable(Of Boolean)
			Get
				Return Me._LASTINDEXSUCCESS
			End Get
			Set
				If (Me._LASTINDEXSUCCESS.Equals(value) = false) Then
					Me.OnLASTINDEXSUCCESSChanging(value)
					Me.SendPropertyChanging
					Me._LASTINDEXSUCCESS = value
					Me.SendPropertyChanged("LASTINDEXSUCCESS")
					Me.OnLASTINDEXSUCCESSChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LASTOCR", DbType:="DateTime")>  _
		Public Property LASTOCR() As System.Nullable(Of Date)
			Get
				Return Me._LASTOCR
			End Get
			Set
				If (Me._LASTOCR.Equals(value) = false) Then
					Me.OnLASTOCRChanging(value)
					Me.SendPropertyChanging
					Me._LASTOCR = value
					Me.SendPropertyChanged("LASTOCR")
					Me.OnLASTOCRChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LASTOCRSUCCESS", DbType:="Bit")>  _
		Public Property LASTOCRSUCCESS() As System.Nullable(Of Boolean)
			Get
				Return Me._LASTOCRSUCCESS
			End Get
			Set
				If (Me._LASTOCRSUCCESS.Equals(value) = false) Then
					Me.OnLASTOCRSUCCESSChanging(value)
					Me.SendPropertyChanging
					Me._LASTOCRSUCCESS = value
					Me.SendPropertyChanged("LASTOCRSUCCESS")
					Me.OnLASTOCRSUCCESSChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SENTTOINDEX", DbType:="DateTime")>  _
		Public Property SENTTOINDEX() As System.Nullable(Of Date)
			Get
				Return Me._SENTTOINDEX
			End Get
			Set
				If (Me._SENTTOINDEX.Equals(value) = false) Then
					Me.OnSENTTOINDEXChanging(value)
					Me.SendPropertyChanging
					Me._SENTTOINDEX = value
					Me.SendPropertyChanged("SENTTOINDEX")
					Me.OnSENTTOINDEXChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SENTTOOCR", DbType:="DateTime")>  _
		Public Property SENTTOOCR() As System.Nullable(Of Date)
			Get
				Return Me._SENTTOOCR
			End Get
			Set
				If (Me._SENTTOOCR.Equals(value) = false) Then
					Me.OnSENTTOOCRChanging(value)
					Me.SendPropertyChanging
					Me._SENTTOOCR = value
					Me.SendPropertyChanged("SENTTOOCR")
					Me.OnSENTTOOCRChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="FIELD00", Storage:="_DocDate", DbType:="NVarChar(25)")>  _
		Public Property InvoiceNumber() As String
			Get
				Return Me._DocDate
			End Get
			Set
				If (String.Equals(Me._DocDate, value) = false) Then
					Me.OnInvoiceNumberChanging(value)
					Me.SendPropertyChanging
					Me._DocDate = value
					Me.SendPropertyChanged("InvoiceNumber")
					Me.OnInvoiceNumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="FIELD01", Storage:="_VendorLocation", DbType:="NVarChar(15)")>  _
		Public Property DocDate() As String
			Get
				Return Me._VendorLocation
			End Get
			Set
				If (String.Equals(Me._VendorLocation, value) = false) Then
					Me.OnDocDateChanging(value)
					Me.SendPropertyChanging
					Me._VendorLocation = value
					Me.SendPropertyChanged("DocDate")
					Me.OnDocDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="FIELD02", Storage:="_DocAmount", DbType:="Decimal(15,4)")>  _
		Public Property DocAmount() As System.Nullable(Of Decimal)
			Get
				Return Me._DocAmount
			End Get
			Set
				If (Me._DocAmount.Equals(value) = false) Then
					Me.OnDocAmountChanging(value)
					Me.SendPropertyChanging
					Me._DocAmount = value
					Me.SendPropertyChanged("DocAmount")
					Me.OnDocAmountChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="FIELD03", Storage:="_ICN", DbType:="NVarChar(15)")>  _
		Public Property ICN() As String
			Get
				Return Me._ICN
			End Get
			Set
				If (String.Equals(Me._ICN, value) = false) Then
					Me.OnICNChanging(value)
					Me.SendPropertyChanging
					Me._ICN = value
					Me.SendPropertyChanged("ICN")
					Me.OnICNChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="FIELD04", Storage:="_PurOrderNumber", DbType:="NVarChar(25)")>  _
		Public Property PurOrderNumber() As String
			Get
				Return Me._PurOrderNumber
			End Get
			Set
				If (String.Equals(Me._PurOrderNumber, value) = false) Then
					Me.OnPurOrderNumberChanging(value)
					Me.SendPropertyChanging
					Me._PurOrderNumber = value
					Me.SendPropertyChanged("PurOrderNumber")
					Me.OnPurOrderNumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="FIELD05", Storage:="_PurReqNumber", DbType:="NVarChar(25)")>  _
		Public Property PurReqNumber() As String
			Get
				Return Me._PurReqNumber
			End Get
			Set
				If (String.Equals(Me._PurReqNumber, value) = false) Then
					Me.OnPurReqNumberChanging(value)
					Me.SendPropertyChanging
					Me._PurReqNumber = value
					Me.SendPropertyChanged("PurReqNumber")
					Me.OnPurReqNumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="FIELD06", Storage:="_ReceiverNumber", DbType:="NVarChar(25)")>  _
		Public Property ReceiverNumber() As String
			Get
				Return Me._ReceiverNumber
			End Get
			Set
				If (String.Equals(Me._ReceiverNumber, value) = false) Then
					Me.OnReceiverNumberChanging(value)
					Me.SendPropertyChanging
					Me._ReceiverNumber = value
					Me.SendPropertyChanged("ReceiverNumber")
					Me.OnReceiverNumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="FIELD07", Storage:="_PurReqOrig", DbType:="NVarChar(15)")>  _
		Public Property PurReqOrig() As String
			Get
				Return Me._PurReqOrig
			End Get
			Set
				If (String.Equals(Me._PurReqOrig, value) = false) Then
					Me.OnPurReqOrigChanging(value)
					Me.SendPropertyChanging
					Me._PurReqOrig = value
					Me.SendPropertyChanged("PurReqOrig")
					Me.OnPurReqOrigChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="FIELD08", Storage:="_Status", DbType:="NVarChar(15)")>  _
		Public Property Status() As String
			Get
				Return Me._Status
			End Get
			Set
				If (String.Equals(Me._Status, value) = false) Then
					Me.OnStatusChanging(value)
					Me.SendPropertyChanging
					Me._Status = value
					Me.SendPropertyChanged("Status")
					Me.OnStatusChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="FIELD09", Storage:="_Location", DbType:="NVarChar(15)")>  _
		Public Property Location() As String
			Get
				Return Me._Location
			End Get
			Set
				If (String.Equals(Me._Location, value) = false) Then
					Me.OnLocationChanging(value)
					Me.SendPropertyChanging
					Me._Location = value
					Me.SendPropertyChanged("Location")
					Me.OnLocationChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="FIELD10", Storage:="_CheckDate", DbType:="NVarChar(500)")>  _
		Public Property CheckDate() As String
			Get
				Return Me._CheckDate
			End Get
			Set
				If (String.Equals(Me._CheckDate, value) = false) Then
					Me.OnCheckDateChanging(value)
					Me.SendPropertyChanging
					Me._CheckDate = value
					Me.SendPropertyChanged("CheckDate")
					Me.OnCheckDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="FIELD11", Storage:="_Approver", DbType:="NVarChar(50)")>  _
		Public Property Approver() As String
			Get
				Return Me._Approver
			End Get
			Set
				If (String.Equals(Me._Approver, value) = false) Then
					Me.OnApproverChanging(value)
					Me.SendPropertyChanging
					Me._Approver = value
					Me.SendPropertyChanged("Approver")
					Me.OnApproverChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="FIELD12", Storage:="_LastWorkflow", DbType:="NVarChar(15)")>  _
		Public Property LastWorkflow() As String
			Get
				Return Me._LastWorkflow
			End Get
			Set
				If (String.Equals(Me._LastWorkflow, value) = false) Then
					Me.OnLastWorkflowChanging(value)
					Me.SendPropertyChanging
					Me._LastWorkflow = value
					Me.SendPropertyChanged("LastWorkflow")
					Me.OnLastWorkflowChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="FIELD13", Storage:="_CheckNumber", DbType:="NVarChar(500)")>  _
		Public Property CheckNumber() As String
			Get
				Return Me._CheckNumber
			End Get
			Set
				If (String.Equals(Me._CheckNumber, value) = false) Then
					Me.OnCheckNumberChanging(value)
					Me.SendPropertyChanging
					Me._CheckNumber = value
					Me.SendPropertyChanged("CheckNumber")
					Me.OnCheckNumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="FIELD14", Storage:="_CostCentre", DbType:="NVarChar(15)")>  _
		Public Property CostCentre() As String
			Get
				Return Me._CostCentre
			End Get
			Set
				If (String.Equals(Me._CostCentre, value) = false) Then
					Me.OnCostCentreChanging(value)
					Me.SendPropertyChanging
					Me._CostCentre = value
					Me.SendPropertyChanged("CostCentre")
					Me.OnCostCentreChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="FIELD15", Storage:="_Department", DbType:="NVarChar(25)")>  _
		Public Property Department() As String
			Get
				Return Me._Department
			End Get
			Set
				If (String.Equals(Me._Department, value) = false) Then
					Me.OnDepartmentChanging(value)
					Me.SendPropertyChanging
					Me._Department = value
					Me.SendPropertyChanged("Department")
					Me.OnDepartmentChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_SKELETON_CONDITION")>  _
	Partial Public Class AP_SKELETON_CONDITION
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _SkeletonId As System.Guid
		
		Private _TableName As String
		
		Private _FieldName As String
		
		Private _Condition As Integer
		
		Private _Value As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSkeletonIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnSkeletonIdChanged()
    End Sub
    Partial Private Sub OnTableNameChanging(value As String)
    End Sub
    Partial Private Sub OnTableNameChanged()
    End Sub
    Partial Private Sub OnFieldNameChanging(value As String)
    End Sub
    Partial Private Sub OnFieldNameChanged()
    End Sub
    Partial Private Sub OnConditionChanging(value As Integer)
    End Sub
    Partial Private Sub OnConditionChanged()
    End Sub
    Partial Private Sub OnValueChanging(value As String)
    End Sub
    Partial Private Sub OnValueChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SkeletonId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
		Public Property SkeletonId() As System.Guid
			Get
				Return Me._SkeletonId
			End Get
			Set
				If ((Me._SkeletonId = value)  _
							= false) Then
					Me.OnSkeletonIdChanging(value)
					Me.SendPropertyChanging
					Me._SkeletonId = value
					Me.SendPropertyChanged("SkeletonId")
					Me.OnSkeletonIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TableName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property TableName() As String
			Get
				Return Me._TableName
			End Get
			Set
				If (String.Equals(Me._TableName, value) = false) Then
					Me.OnTableNameChanging(value)
					Me.SendPropertyChanging
					Me._TableName = value
					Me.SendPropertyChanged("TableName")
					Me.OnTableNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FieldName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property FieldName() As String
			Get
				Return Me._FieldName
			End Get
			Set
				If (String.Equals(Me._FieldName, value) = false) Then
					Me.OnFieldNameChanging(value)
					Me.SendPropertyChanging
					Me._FieldName = value
					Me.SendPropertyChanged("FieldName")
					Me.OnFieldNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Condition", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property Condition() As Integer
			Get
				Return Me._Condition
			End Get
			Set
				If ((Me._Condition = value)  _
							= false) Then
					Me.OnConditionChanging(value)
					Me.SendPropertyChanging
					Me._Condition = value
					Me.SendPropertyChanged("Condition")
					Me.OnConditionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Value() As String
			Get
				Return Me._Value
			End Get
			Set
				If (String.Equals(Me._Value, value) = false) Then
					Me.OnValueChanging(value)
					Me.SendPropertyChanging
					Me._Value = value
					Me.SendPropertyChanged("Value")
					Me.OnValueChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_PO_HEADER")>  _
	Partial Public Class AP_PO_HEADER
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ERPSystem As String
		
		Private _CompanyCode As String
		
		Private _ClientCode As String
		
		Private _PONumber As String
		
		Private _SupplierId As String
		
		Private _TransDate As Date
		
		Private _NetAmount As Double
		
		Private _TaxAmount As Double
		
		Private _DocID As System.Nullable(Of Integer)
		
		Private _EmailStatus As System.Nullable(Of Integer)
		
		Private _SupplierLocation As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnERPSystemChanging(value As String)
    End Sub
    Partial Private Sub OnERPSystemChanged()
    End Sub
    Partial Private Sub OnCompanyCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCompanyCodeChanged()
    End Sub
    Partial Private Sub OnClientCodeChanging(value As String)
    End Sub
    Partial Private Sub OnClientCodeChanged()
    End Sub
    Partial Private Sub OnPONumberChanging(value As String)
    End Sub
    Partial Private Sub OnPONumberChanged()
    End Sub
    Partial Private Sub OnSupplierIdChanging(value As String)
    End Sub
    Partial Private Sub OnSupplierIdChanged()
    End Sub
    Partial Private Sub OnTransDateChanging(value As Date)
    End Sub
    Partial Private Sub OnTransDateChanged()
    End Sub
    Partial Private Sub OnNetAmountChanging(value As Double)
    End Sub
    Partial Private Sub OnNetAmountChanged()
    End Sub
    Partial Private Sub OnTaxAmountChanging(value As Double)
    End Sub
    Partial Private Sub OnTaxAmountChanged()
    End Sub
    Partial Private Sub OnDocIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDocIDChanged()
    End Sub
    Partial Private Sub OnEmailStatusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEmailStatusChanged()
    End Sub
    Partial Private Sub OnSupplierLocationChanging(value As String)
    End Sub
    Partial Private Sub OnSupplierLocationChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ERPSystem", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property ERPSystem() As String
			Get
				Return Me._ERPSystem
			End Get
			Set
				If (String.Equals(Me._ERPSystem, value) = false) Then
					Me.OnERPSystemChanging(value)
					Me.SendPropertyChanging
					Me._ERPSystem = value
					Me.SendPropertyChanged("ERPSystem")
					Me.OnERPSystemChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyCode", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property CompanyCode() As String
			Get
				Return Me._CompanyCode
			End Get
			Set
				If (String.Equals(Me._CompanyCode, value) = false) Then
					Me.OnCompanyCodeChanging(value)
					Me.SendPropertyChanging
					Me._CompanyCode = value
					Me.SendPropertyChanged("CompanyCode")
					Me.OnCompanyCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientCode", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property ClientCode() As String
			Get
				Return Me._ClientCode
			End Get
			Set
				If (String.Equals(Me._ClientCode, value) = false) Then
					Me.OnClientCodeChanging(value)
					Me.SendPropertyChanging
					Me._ClientCode = value
					Me.SendPropertyChanged("ClientCode")
					Me.OnClientCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PONumber", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property PONumber() As String
			Get
				Return Me._PONumber
			End Get
			Set
				If (String.Equals(Me._PONumber, value) = false) Then
					Me.OnPONumberChanging(value)
					Me.SendPropertyChanging
					Me._PONumber = value
					Me.SendPropertyChanged("PONumber")
					Me.OnPONumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierId", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property SupplierId() As String
			Get
				Return Me._SupplierId
			End Get
			Set
				If (String.Equals(Me._SupplierId, value) = false) Then
					Me.OnSupplierIdChanging(value)
					Me.SendPropertyChanging
					Me._SupplierId = value
					Me.SendPropertyChanged("SupplierId")
					Me.OnSupplierIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransDate", DbType:="DateTime NOT NULL")>  _
		Public Property TransDate() As Date
			Get
				Return Me._TransDate
			End Get
			Set
				If ((Me._TransDate = value)  _
							= false) Then
					Me.OnTransDateChanging(value)
					Me.SendPropertyChanging
					Me._TransDate = value
					Me.SendPropertyChanged("TransDate")
					Me.OnTransDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NetAmount", DbType:="Float NOT NULL")>  _
		Public Property NetAmount() As Double
			Get
				Return Me._NetAmount
			End Get
			Set
				If ((Me._NetAmount = value)  _
							= false) Then
					Me.OnNetAmountChanging(value)
					Me.SendPropertyChanging
					Me._NetAmount = value
					Me.SendPropertyChanged("NetAmount")
					Me.OnNetAmountChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TaxAmount", DbType:="Float NOT NULL")>  _
		Public Property TaxAmount() As Double
			Get
				Return Me._TaxAmount
			End Get
			Set
				If ((Me._TaxAmount = value)  _
							= false) Then
					Me.OnTaxAmountChanging(value)
					Me.SendPropertyChanging
					Me._TaxAmount = value
					Me.SendPropertyChanged("TaxAmount")
					Me.OnTaxAmountChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocID", DbType:="Int")>  _
		Public Property DocID() As System.Nullable(Of Integer)
			Get
				Return Me._DocID
			End Get
			Set
				If (Me._DocID.Equals(value) = false) Then
					Me.OnDocIDChanging(value)
					Me.SendPropertyChanging
					Me._DocID = value
					Me.SendPropertyChanged("DocID")
					Me.OnDocIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailStatus", DbType:="Int")>  _
		Public Property EmailStatus() As System.Nullable(Of Integer)
			Get
				Return Me._EmailStatus
			End Get
			Set
				If (Me._EmailStatus.Equals(value) = false) Then
					Me.OnEmailStatusChanging(value)
					Me.SendPropertyChanging
					Me._EmailStatus = value
					Me.SendPropertyChanged("EmailStatus")
					Me.OnEmailStatusChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierLocation", DbType:="VarChar(50)")>  _
		Public Property SupplierLocation() As String
			Get
				Return Me._SupplierLocation
			End Get
			Set
				If (String.Equals(Me._SupplierLocation, value) = false) Then
					Me.OnSupplierLocationChanging(value)
					Me.SendPropertyChanging
					Me._SupplierLocation = value
					Me.SendPropertyChanged("SupplierLocation")
					Me.OnSupplierLocationChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_MASTERLOCATION_DRAWER")>  _
	Partial Public Class AP_MASTERLOCATION_DRAWER
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _MasterLocation As String
		
		Private _DrawerName As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMasterLocationChanging(value As String)
    End Sub
    Partial Private Sub OnMasterLocationChanged()
    End Sub
    Partial Private Sub OnDrawerNameChanging(value As String)
    End Sub
    Partial Private Sub OnDrawerNameChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MasterLocation", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property MasterLocation() As String
			Get
				Return Me._MasterLocation
			End Get
			Set
				If (String.Equals(Me._MasterLocation, value) = false) Then
					Me.OnMasterLocationChanging(value)
					Me.SendPropertyChanging
					Me._MasterLocation = value
					Me.SendPropertyChanged("MasterLocation")
					Me.OnMasterLocationChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DrawerName", DbType:="VarChar(50)")>  _
		Public Property DrawerName() As String
			Get
				Return Me._DrawerName
			End Get
			Set
				If (String.Equals(Me._DrawerName, value) = false) Then
					Me.OnDrawerNameChanging(value)
					Me.SendPropertyChanging
					Me._DrawerName = value
					Me.SendPropertyChanged("DrawerName")
					Me.OnDrawerNameChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_PPR_APPROVALS")>  _
	Partial Public Class AP_PPR_APPROVAL
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _pprApprovalID As Integer
		
		Private _pprHeaderID As Integer
		
		Private _LOAStatus As Integer
		
		Private _CCN As String
		
		Private _DocDate As String
		
		Private _FileName As String
		
		Private _LOAID As System.Guid
		
		Private _CostCentre As String
		
		Private _Department As String
		
		Private _ApproverName As String
		
		Private _SignOffLimit As System.Nullable(Of Decimal)
		
		Private _DLX_Login As String
		
		Private _Email1 As String
		
		Private _Email2 As String
		
		Private _NumApprovers As System.Nullable(Of Integer)
		
		Private _AutoEscalate As System.Nullable(Of Integer)
		
		Private _ApprovalOrder As System.Nullable(Of Integer)
		
		Private _NoticeSentOn As System.Nullable(Of Date)
		
		Private _ExpiresOn As System.Nullable(Of Date)
		
		Private _ActionDate As System.Nullable(Of Date)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnpprApprovalIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnpprApprovalIDChanged()
    End Sub
    Partial Private Sub OnpprHeaderIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnpprHeaderIDChanged()
    End Sub
    Partial Private Sub OnLOAStatusChanging(value As Integer)
    End Sub
    Partial Private Sub OnLOAStatusChanged()
    End Sub
    Partial Private Sub OnCCNChanging(value As String)
    End Sub
    Partial Private Sub OnCCNChanged()
    End Sub
    Partial Private Sub OnDocDateChanging(value As String)
    End Sub
    Partial Private Sub OnDocDateChanged()
    End Sub
    Partial Private Sub OnFileNameChanging(value As String)
    End Sub
    Partial Private Sub OnFileNameChanged()
    End Sub
    Partial Private Sub OnLOAIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnLOAIDChanged()
    End Sub
    Partial Private Sub OnCostCentreChanging(value As String)
    End Sub
    Partial Private Sub OnCostCentreChanged()
    End Sub
    Partial Private Sub OnDepartmentChanging(value As String)
    End Sub
    Partial Private Sub OnDepartmentChanged()
    End Sub
    Partial Private Sub OnApproverNameChanging(value As String)
    End Sub
    Partial Private Sub OnApproverNameChanged()
    End Sub
    Partial Private Sub OnSignOffLimitChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnSignOffLimitChanged()
    End Sub
    Partial Private Sub OnDLX_LoginChanging(value As String)
    End Sub
    Partial Private Sub OnDLX_LoginChanged()
    End Sub
    Partial Private Sub OnEmail1Changing(value As String)
    End Sub
    Partial Private Sub OnEmail1Changed()
    End Sub
    Partial Private Sub OnEmail2Changing(value As String)
    End Sub
    Partial Private Sub OnEmail2Changed()
    End Sub
    Partial Private Sub OnNumApproversChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumApproversChanged()
    End Sub
    Partial Private Sub OnAutoEscalateChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAutoEscalateChanged()
    End Sub
    Partial Private Sub OnApprovalOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnApprovalOrderChanged()
    End Sub
    Partial Private Sub OnNoticeSentOnChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnNoticeSentOnChanged()
    End Sub
    Partial Private Sub OnExpiresOnChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnExpiresOnChanged()
    End Sub
    Partial Private Sub OnActionDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnActionDateChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pprApprovalID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property pprApprovalID() As Integer
			Get
				Return Me._pprApprovalID
			End Get
			Set
				If ((Me._pprApprovalID = value)  _
							= false) Then
					Me.OnpprApprovalIDChanging(value)
					Me.SendPropertyChanging
					Me._pprApprovalID = value
					Me.SendPropertyChanged("pprApprovalID")
					Me.OnpprApprovalIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pprHeaderID", DbType:="Int NOT NULL")>  _
		Public Property pprHeaderID() As Integer
			Get
				Return Me._pprHeaderID
			End Get
			Set
				If ((Me._pprHeaderID = value)  _
							= false) Then
					Me.OnpprHeaderIDChanging(value)
					Me.SendPropertyChanging
					Me._pprHeaderID = value
					Me.SendPropertyChanged("pprHeaderID")
					Me.OnpprHeaderIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LOAStatus", DbType:="Int NOT NULL")>  _
		Public Property LOAStatus() As Integer
			Get
				Return Me._LOAStatus
			End Get
			Set
				If ((Me._LOAStatus = value)  _
							= false) Then
					Me.OnLOAStatusChanging(value)
					Me.SendPropertyChanging
					Me._LOAStatus = value
					Me.SendPropertyChanged("LOAStatus")
					Me.OnLOAStatusChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCN", DbType:="VarChar(6)")>  _
		Public Property CCN() As String
			Get
				Return Me._CCN
			End Get
			Set
				If (String.Equals(Me._CCN, value) = false) Then
					Me.OnCCNChanging(value)
					Me.SendPropertyChanging
					Me._CCN = value
					Me.SendPropertyChanged("CCN")
					Me.OnCCNChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocDate", DbType:="VarChar(20)")>  _
		Public Property DocDate() As String
			Get
				Return Me._DocDate
			End Get
			Set
				If (String.Equals(Me._DocDate, value) = false) Then
					Me.OnDocDateChanging(value)
					Me.SendPropertyChanging
					Me._DocDate = value
					Me.SendPropertyChanged("DocDate")
					Me.OnDocDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FileName", DbType:="VarChar(255)")>  _
		Public Property FileName() As String
			Get
				Return Me._FileName
			End Get
			Set
				If (String.Equals(Me._FileName, value) = false) Then
					Me.OnFileNameChanging(value)
					Me.SendPropertyChanging
					Me._FileName = value
					Me.SendPropertyChanged("FileName")
					Me.OnFileNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LOAID", DbType:="UniqueIdentifier NOT NULL")>  _
		Public Property LOAID() As System.Guid
			Get
				Return Me._LOAID
			End Get
			Set
				If ((Me._LOAID = value)  _
							= false) Then
					Me.OnLOAIDChanging(value)
					Me.SendPropertyChanging
					Me._LOAID = value
					Me.SendPropertyChanged("LOAID")
					Me.OnLOAIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CostCentre", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property CostCentre() As String
			Get
				Return Me._CostCentre
			End Get
			Set
				If (String.Equals(Me._CostCentre, value) = false) Then
					Me.OnCostCentreChanging(value)
					Me.SendPropertyChanging
					Me._CostCentre = value
					Me.SendPropertyChanged("CostCentre")
					Me.OnCostCentreChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Department", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property Department() As String
			Get
				Return Me._Department
			End Get
			Set
				If (String.Equals(Me._Department, value) = false) Then
					Me.OnDepartmentChanging(value)
					Me.SendPropertyChanging
					Me._Department = value
					Me.SendPropertyChanged("Department")
					Me.OnDepartmentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApproverName", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
		Public Property ApproverName() As String
			Get
				Return Me._ApproverName
			End Get
			Set
				If (String.Equals(Me._ApproverName, value) = false) Then
					Me.OnApproverNameChanging(value)
					Me.SendPropertyChanging
					Me._ApproverName = value
					Me.SendPropertyChanged("ApproverName")
					Me.OnApproverNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SignOffLimit", DbType:="Decimal(18,2)")>  _
		Public Property SignOffLimit() As System.Nullable(Of Decimal)
			Get
				Return Me._SignOffLimit
			End Get
			Set
				If (Me._SignOffLimit.Equals(value) = false) Then
					Me.OnSignOffLimitChanging(value)
					Me.SendPropertyChanging
					Me._SignOffLimit = value
					Me.SendPropertyChanged("SignOffLimit")
					Me.OnSignOffLimitChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DLX_Login", DbType:="NVarChar(254)")>  _
		Public Property DLX_Login() As String
			Get
				Return Me._DLX_Login
			End Get
			Set
				If (String.Equals(Me._DLX_Login, value) = false) Then
					Me.OnDLX_LoginChanging(value)
					Me.SendPropertyChanging
					Me._DLX_Login = value
					Me.SendPropertyChanged("DLX_Login")
					Me.OnDLX_LoginChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email1", DbType:="NVarChar(254)")>  _
		Public Property Email1() As String
			Get
				Return Me._Email1
			End Get
			Set
				If (String.Equals(Me._Email1, value) = false) Then
					Me.OnEmail1Changing(value)
					Me.SendPropertyChanging
					Me._Email1 = value
					Me.SendPropertyChanged("Email1")
					Me.OnEmail1Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email2", DbType:="NVarChar(254)")>  _
		Public Property Email2() As String
			Get
				Return Me._Email2
			End Get
			Set
				If (String.Equals(Me._Email2, value) = false) Then
					Me.OnEmail2Changing(value)
					Me.SendPropertyChanging
					Me._Email2 = value
					Me.SendPropertyChanged("Email2")
					Me.OnEmail2Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumApprovers", DbType:="Int")>  _
		Public Property NumApprovers() As System.Nullable(Of Integer)
			Get
				Return Me._NumApprovers
			End Get
			Set
				If (Me._NumApprovers.Equals(value) = false) Then
					Me.OnNumApproversChanging(value)
					Me.SendPropertyChanging
					Me._NumApprovers = value
					Me.SendPropertyChanged("NumApprovers")
					Me.OnNumApproversChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AutoEscalate", DbType:="Int")>  _
		Public Property AutoEscalate() As System.Nullable(Of Integer)
			Get
				Return Me._AutoEscalate
			End Get
			Set
				If (Me._AutoEscalate.Equals(value) = false) Then
					Me.OnAutoEscalateChanging(value)
					Me.SendPropertyChanging
					Me._AutoEscalate = value
					Me.SendPropertyChanged("AutoEscalate")
					Me.OnAutoEscalateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApprovalOrder", DbType:="Int")>  _
		Public Property ApprovalOrder() As System.Nullable(Of Integer)
			Get
				Return Me._ApprovalOrder
			End Get
			Set
				If (Me._ApprovalOrder.Equals(value) = false) Then
					Me.OnApprovalOrderChanging(value)
					Me.SendPropertyChanging
					Me._ApprovalOrder = value
					Me.SendPropertyChanged("ApprovalOrder")
					Me.OnApprovalOrderChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NoticeSentOn", DbType:="DateTime")>  _
		Public Property NoticeSentOn() As System.Nullable(Of Date)
			Get
				Return Me._NoticeSentOn
			End Get
			Set
				If (Me._NoticeSentOn.Equals(value) = false) Then
					Me.OnNoticeSentOnChanging(value)
					Me.SendPropertyChanging
					Me._NoticeSentOn = value
					Me.SendPropertyChanged("NoticeSentOn")
					Me.OnNoticeSentOnChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpiresOn", DbType:="DateTime")>  _
		Public Property ExpiresOn() As System.Nullable(Of Date)
			Get
				Return Me._ExpiresOn
			End Get
			Set
				If (Me._ExpiresOn.Equals(value) = false) Then
					Me.OnExpiresOnChanging(value)
					Me.SendPropertyChanging
					Me._ExpiresOn = value
					Me.SendPropertyChanged("ExpiresOn")
					Me.OnExpiresOnChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActionDate", DbType:="DateTime")>  _
		Public Property ActionDate() As System.Nullable(Of Date)
			Get
				Return Me._ActionDate
			End Get
			Set
				If (Me._ActionDate.Equals(value) = false) Then
					Me.OnActionDateChanging(value)
					Me.SendPropertyChanging
					Me._ActionDate = value
					Me.SendPropertyChanged("ActionDate")
					Me.OnActionDateChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_SUPPLIER")>  _
	Partial Public Class AP_SUPPLIER
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ERPSystem As String
		
		Private _CompanyCode As String
		
		Private _ClientCode As String
		
		Private _SupplierId As String
		
		Private _SupplierName As String
		
		Private _Street As String
		
		Private _Town As String
		
		Private _Country As String
		
		Private _PostCode As String
		
		Private _PhoneNum As String
		
		Private _VATExempt As Boolean
		
		Private _VATRegNo As String
		
		Private _DefaultVATCode As String
		
		Private _Currency As String
		
		Private _DefaultDepartment As String
		
		Private _SupplierLocation As String
		
		Private _Email As String
		
		Private _CCN As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnERPSystemChanging(value As String)
    End Sub
    Partial Private Sub OnERPSystemChanged()
    End Sub
    Partial Private Sub OnCompanyCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCompanyCodeChanged()
    End Sub
    Partial Private Sub OnClientCodeChanging(value As String)
    End Sub
    Partial Private Sub OnClientCodeChanged()
    End Sub
    Partial Private Sub OnSupplierIdChanging(value As String)
    End Sub
    Partial Private Sub OnSupplierIdChanged()
    End Sub
    Partial Private Sub OnSupplierNameChanging(value As String)
    End Sub
    Partial Private Sub OnSupplierNameChanged()
    End Sub
    Partial Private Sub OnStreetChanging(value As String)
    End Sub
    Partial Private Sub OnStreetChanged()
    End Sub
    Partial Private Sub OnTownChanging(value As String)
    End Sub
    Partial Private Sub OnTownChanged()
    End Sub
    Partial Private Sub OnCountryChanging(value As String)
    End Sub
    Partial Private Sub OnCountryChanged()
    End Sub
    Partial Private Sub OnPostCodeChanging(value As String)
    End Sub
    Partial Private Sub OnPostCodeChanged()
    End Sub
    Partial Private Sub OnPhoneNumChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneNumChanged()
    End Sub
    Partial Private Sub OnVATExemptChanging(value As Boolean)
    End Sub
    Partial Private Sub OnVATExemptChanged()
    End Sub
    Partial Private Sub OnVATRegNoChanging(value As String)
    End Sub
    Partial Private Sub OnVATRegNoChanged()
    End Sub
    Partial Private Sub OnDefaultVATCodeChanging(value As String)
    End Sub
    Partial Private Sub OnDefaultVATCodeChanged()
    End Sub
    Partial Private Sub OnCurrencyChanging(value As String)
    End Sub
    Partial Private Sub OnCurrencyChanged()
    End Sub
    Partial Private Sub OnDefaultDepartmentChanging(value As String)
    End Sub
    Partial Private Sub OnDefaultDepartmentChanged()
    End Sub
    Partial Private Sub OnSupplierLocationChanging(value As String)
    End Sub
    Partial Private Sub OnSupplierLocationChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnCCNChanging(value As String)
    End Sub
    Partial Private Sub OnCCNChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ERPSystem", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property ERPSystem() As String
			Get
				Return Me._ERPSystem
			End Get
			Set
				If (String.Equals(Me._ERPSystem, value) = false) Then
					Me.OnERPSystemChanging(value)
					Me.SendPropertyChanging
					Me._ERPSystem = value
					Me.SendPropertyChanged("ERPSystem")
					Me.OnERPSystemChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyCode", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property CompanyCode() As String
			Get
				Return Me._CompanyCode
			End Get
			Set
				If (String.Equals(Me._CompanyCode, value) = false) Then
					Me.OnCompanyCodeChanging(value)
					Me.SendPropertyChanging
					Me._CompanyCode = value
					Me.SendPropertyChanged("CompanyCode")
					Me.OnCompanyCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientCode", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property ClientCode() As String
			Get
				Return Me._ClientCode
			End Get
			Set
				If (String.Equals(Me._ClientCode, value) = false) Then
					Me.OnClientCodeChanging(value)
					Me.SendPropertyChanging
					Me._ClientCode = value
					Me.SendPropertyChanged("ClientCode")
					Me.OnClientCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierId", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property SupplierId() As String
			Get
				Return Me._SupplierId
			End Get
			Set
				If (String.Equals(Me._SupplierId, value) = false) Then
					Me.OnSupplierIdChanging(value)
					Me.SendPropertyChanging
					Me._SupplierId = value
					Me.SendPropertyChanged("SupplierId")
					Me.OnSupplierIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierName", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
		Public Property SupplierName() As String
			Get
				Return Me._SupplierName
			End Get
			Set
				If (String.Equals(Me._SupplierName, value) = false) Then
					Me.OnSupplierNameChanging(value)
					Me.SendPropertyChanging
					Me._SupplierName = value
					Me.SendPropertyChanged("SupplierName")
					Me.OnSupplierNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Street", DbType:="NVarChar(150)")>  _
		Public Property Street() As String
			Get
				Return Me._Street
			End Get
			Set
				If (String.Equals(Me._Street, value) = false) Then
					Me.OnStreetChanging(value)
					Me.SendPropertyChanging
					Me._Street = value
					Me.SendPropertyChanged("Street")
					Me.OnStreetChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Town", DbType:="NVarChar(100)")>  _
		Public Property Town() As String
			Get
				Return Me._Town
			End Get
			Set
				If (String.Equals(Me._Town, value) = false) Then
					Me.OnTownChanging(value)
					Me.SendPropertyChanging
					Me._Town = value
					Me.SendPropertyChanged("Town")
					Me.OnTownChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country", DbType:="NVarChar(100)")>  _
		Public Property Country() As String
			Get
				Return Me._Country
			End Get
			Set
				If (String.Equals(Me._Country, value) = false) Then
					Me.OnCountryChanging(value)
					Me.SendPropertyChanging
					Me._Country = value
					Me.SendPropertyChanged("Country")
					Me.OnCountryChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostCode", DbType:="NVarChar(15)")>  _
		Public Property PostCode() As String
			Get
				Return Me._PostCode
			End Get
			Set
				If (String.Equals(Me._PostCode, value) = false) Then
					Me.OnPostCodeChanging(value)
					Me.SendPropertyChanging
					Me._PostCode = value
					Me.SendPropertyChanged("PostCode")
					Me.OnPostCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNum", DbType:="NVarChar(25)")>  _
		Public Property PhoneNum() As String
			Get
				Return Me._PhoneNum
			End Get
			Set
				If (String.Equals(Me._PhoneNum, value) = false) Then
					Me.OnPhoneNumChanging(value)
					Me.SendPropertyChanging
					Me._PhoneNum = value
					Me.SendPropertyChanged("PhoneNum")
					Me.OnPhoneNumChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VATExempt", DbType:="Bit NOT NULL")>  _
		Public Property VATExempt() As Boolean
			Get
				Return Me._VATExempt
			End Get
			Set
				If ((Me._VATExempt = value)  _
							= false) Then
					Me.OnVATExemptChanging(value)
					Me.SendPropertyChanging
					Me._VATExempt = value
					Me.SendPropertyChanged("VATExempt")
					Me.OnVATExemptChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VATRegNo", DbType:="NVarChar(20)")>  _
		Public Property VATRegNo() As String
			Get
				Return Me._VATRegNo
			End Get
			Set
				If (String.Equals(Me._VATRegNo, value) = false) Then
					Me.OnVATRegNoChanging(value)
					Me.SendPropertyChanging
					Me._VATRegNo = value
					Me.SendPropertyChanged("VATRegNo")
					Me.OnVATRegNoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultVATCode", DbType:="NVarChar(5)")>  _
		Public Property DefaultVATCode() As String
			Get
				Return Me._DefaultVATCode
			End Get
			Set
				If (String.Equals(Me._DefaultVATCode, value) = false) Then
					Me.OnDefaultVATCodeChanging(value)
					Me.SendPropertyChanging
					Me._DefaultVATCode = value
					Me.SendPropertyChanged("DefaultVATCode")
					Me.OnDefaultVATCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Currency", DbType:="NVarChar(20)")>  _
		Public Property Currency() As String
			Get
				Return Me._Currency
			End Get
			Set
				If (String.Equals(Me._Currency, value) = false) Then
					Me.OnCurrencyChanging(value)
					Me.SendPropertyChanging
					Me._Currency = value
					Me.SendPropertyChanged("Currency")
					Me.OnCurrencyChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultDepartment", DbType:="NVarChar(20)")>  _
		Public Property DefaultDepartment() As String
			Get
				Return Me._DefaultDepartment
			End Get
			Set
				If (String.Equals(Me._DefaultDepartment, value) = false) Then
					Me.OnDefaultDepartmentChanging(value)
					Me.SendPropertyChanging
					Me._DefaultDepartment = value
					Me.SendPropertyChanged("DefaultDepartment")
					Me.OnDefaultDepartmentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierLocation", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property SupplierLocation() As String
			Get
				Return Me._SupplierLocation
			End Get
			Set
				If (String.Equals(Me._SupplierLocation, value) = false) Then
					Me.OnSupplierLocationChanging(value)
					Me.SendPropertyChanging
					Me._SupplierLocation = value
					Me.SendPropertyChanged("SupplierLocation")
					Me.OnSupplierLocationChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NChar(60)")>  _
		Public Property Email() As String
			Get
				Return Me._Email
			End Get
			Set
				If (String.Equals(Me._Email, value) = false) Then
					Me.OnEmailChanging(value)
					Me.SendPropertyChanging
					Me._Email = value
					Me.SendPropertyChanged("Email")
					Me.OnEmailChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCN", DbType:="NChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property CCN() As String
			Get
				Return Me._CCN
			End Get
			Set
				If (String.Equals(Me._CCN, value) = false) Then
					Me.OnCCNChanging(value)
					Me.SendPropertyChanging
					Me._CCN = value
					Me.SendPropertyChanged("CCN")
					Me.OnCCNChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.GL_CODE")>  _
	Partial Public Class GL_CODE
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ERPSystem As String
		
		Private _CompanyCode As String
		
		Private _ClientCode As String
		
		Private _Department As String
		
		Private _CostCentre As String
		
		Private _GLCode As String
		
		Private _GLDescr As String
		
		Private _JEApprover As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnERPSystemChanging(value As String)
    End Sub
    Partial Private Sub OnERPSystemChanged()
    End Sub
    Partial Private Sub OnCompanyCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCompanyCodeChanged()
    End Sub
    Partial Private Sub OnClientCodeChanging(value As String)
    End Sub
    Partial Private Sub OnClientCodeChanged()
    End Sub
    Partial Private Sub OnDepartmentChanging(value As String)
    End Sub
    Partial Private Sub OnDepartmentChanged()
    End Sub
    Partial Private Sub OnCostCentreChanging(value As String)
    End Sub
    Partial Private Sub OnCostCentreChanged()
    End Sub
    Partial Private Sub OnGLCodeChanging(value As String)
    End Sub
    Partial Private Sub OnGLCodeChanged()
    End Sub
    Partial Private Sub OnGLDescrChanging(value As String)
    End Sub
    Partial Private Sub OnGLDescrChanged()
    End Sub
    Partial Private Sub OnJEApproverChanging(value As String)
    End Sub
    Partial Private Sub OnJEApproverChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ERPSystem", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property ERPSystem() As String
			Get
				Return Me._ERPSystem
			End Get
			Set
				If (String.Equals(Me._ERPSystem, value) = false) Then
					Me.OnERPSystemChanging(value)
					Me.SendPropertyChanging
					Me._ERPSystem = value
					Me.SendPropertyChanged("ERPSystem")
					Me.OnERPSystemChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyCode", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property CompanyCode() As String
			Get
				Return Me._CompanyCode
			End Get
			Set
				If (String.Equals(Me._CompanyCode, value) = false) Then
					Me.OnCompanyCodeChanging(value)
					Me.SendPropertyChanging
					Me._CompanyCode = value
					Me.SendPropertyChanged("CompanyCode")
					Me.OnCompanyCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientCode", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property ClientCode() As String
			Get
				Return Me._ClientCode
			End Get
			Set
				If (String.Equals(Me._ClientCode, value) = false) Then
					Me.OnClientCodeChanging(value)
					Me.SendPropertyChanging
					Me._ClientCode = value
					Me.SendPropertyChanged("ClientCode")
					Me.OnClientCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Department", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property Department() As String
			Get
				Return Me._Department
			End Get
			Set
				If (String.Equals(Me._Department, value) = false) Then
					Me.OnDepartmentChanging(value)
					Me.SendPropertyChanging
					Me._Department = value
					Me.SendPropertyChanged("Department")
					Me.OnDepartmentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CostCentre", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property CostCentre() As String
			Get
				Return Me._CostCentre
			End Get
			Set
				If (String.Equals(Me._CostCentre, value) = false) Then
					Me.OnCostCentreChanging(value)
					Me.SendPropertyChanging
					Me._CostCentre = value
					Me.SendPropertyChanged("CostCentre")
					Me.OnCostCentreChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GLCode", DbType:="NVarChar(30) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property GLCode() As String
			Get
				Return Me._GLCode
			End Get
			Set
				If (String.Equals(Me._GLCode, value) = false) Then
					Me.OnGLCodeChanging(value)
					Me.SendPropertyChanging
					Me._GLCode = value
					Me.SendPropertyChanged("GLCode")
					Me.OnGLCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GLDescr", DbType:="NVarChar(50)")>  _
		Public Property GLDescr() As String
			Get
				Return Me._GLDescr
			End Get
			Set
				If (String.Equals(Me._GLDescr, value) = false) Then
					Me.OnGLDescrChanging(value)
					Me.SendPropertyChanging
					Me._GLDescr = value
					Me.SendPropertyChanged("GLDescr")
					Me.OnGLDescrChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_JEApprover", DbType:="VarChar(8)")>  _
		Public Property JEApprover() As String
			Get
				Return Me._JEApprover
			End Get
			Set
				If (String.Equals(Me._JEApprover, value) = false) Then
					Me.OnJEApproverChanging(value)
					Me.SendPropertyChanging
					Me._JEApprover = value
					Me.SendPropertyChanged("JEApprover")
					Me.OnJEApproverChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.JE_APPROVALS")>  _
	Partial Public Class JE_APPROVAL
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _jeApprovalID As Integer
		
		Private _LOAStatus As Integer
		
		Private _DocDate As String
		
		Private _FileName As String
		
		Private _LOAID As System.Guid
		
		Private _CostCentre As String
		
		Private _Department As String
		
		Private _ApproverName As String
		
		Private _SignOffLimit As System.Nullable(Of Decimal)
		
		Private _DLX_Login As String
		
		Private _Email1 As String
		
		Private _Email2 As String
		
		Private _NumApprovers As System.Nullable(Of Integer)
		
		Private _AutoEscalate As System.Nullable(Of Integer)
		
		Private _ApprovalOrder As System.Nullable(Of Integer)
		
		Private _NoticeSentOn As System.Nullable(Of Date)
		
		Private _ExpiresOn As System.Nullable(Of Date)
		
		Private _ActionDate As System.Nullable(Of Date)
		
		Private _DOCID As System.Nullable(Of Integer)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnjeApprovalIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnjeApprovalIDChanged()
    End Sub
    Partial Private Sub OnLOAStatusChanging(value As Integer)
    End Sub
    Partial Private Sub OnLOAStatusChanged()
    End Sub
    Partial Private Sub OnDocDateChanging(value As String)
    End Sub
    Partial Private Sub OnDocDateChanged()
    End Sub
    Partial Private Sub OnFileNameChanging(value As String)
    End Sub
    Partial Private Sub OnFileNameChanged()
    End Sub
    Partial Private Sub OnLOAIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnLOAIDChanged()
    End Sub
    Partial Private Sub OnCostCentreChanging(value As String)
    End Sub
    Partial Private Sub OnCostCentreChanged()
    End Sub
    Partial Private Sub OnDepartmentChanging(value As String)
    End Sub
    Partial Private Sub OnDepartmentChanged()
    End Sub
    Partial Private Sub OnApproverNameChanging(value As String)
    End Sub
    Partial Private Sub OnApproverNameChanged()
    End Sub
    Partial Private Sub OnSignOffLimitChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnSignOffLimitChanged()
    End Sub
    Partial Private Sub OnDLX_LoginChanging(value As String)
    End Sub
    Partial Private Sub OnDLX_LoginChanged()
    End Sub
    Partial Private Sub OnEmail1Changing(value As String)
    End Sub
    Partial Private Sub OnEmail1Changed()
    End Sub
    Partial Private Sub OnEmail2Changing(value As String)
    End Sub
    Partial Private Sub OnEmail2Changed()
    End Sub
    Partial Private Sub OnNumApproversChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumApproversChanged()
    End Sub
    Partial Private Sub OnAutoEscalateChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAutoEscalateChanged()
    End Sub
    Partial Private Sub OnApprovalOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnApprovalOrderChanged()
    End Sub
    Partial Private Sub OnNoticeSentOnChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnNoticeSentOnChanged()
    End Sub
    Partial Private Sub OnExpiresOnChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnExpiresOnChanged()
    End Sub
    Partial Private Sub OnActionDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnActionDateChanged()
    End Sub
    Partial Private Sub OnDOCIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDOCIDChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_jeApprovalID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property jeApprovalID() As Integer
			Get
				Return Me._jeApprovalID
			End Get
			Set
				If ((Me._jeApprovalID = value)  _
							= false) Then
					Me.OnjeApprovalIDChanging(value)
					Me.SendPropertyChanging
					Me._jeApprovalID = value
					Me.SendPropertyChanged("jeApprovalID")
					Me.OnjeApprovalIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LOAStatus", DbType:="Int NOT NULL")>  _
		Public Property LOAStatus() As Integer
			Get
				Return Me._LOAStatus
			End Get
			Set
				If ((Me._LOAStatus = value)  _
							= false) Then
					Me.OnLOAStatusChanging(value)
					Me.SendPropertyChanging
					Me._LOAStatus = value
					Me.SendPropertyChanged("LOAStatus")
					Me.OnLOAStatusChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocDate", DbType:="VarChar(20)")>  _
		Public Property DocDate() As String
			Get
				Return Me._DocDate
			End Get
			Set
				If (String.Equals(Me._DocDate, value) = false) Then
					Me.OnDocDateChanging(value)
					Me.SendPropertyChanging
					Me._DocDate = value
					Me.SendPropertyChanged("DocDate")
					Me.OnDocDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FileName", DbType:="VarChar(255)")>  _
		Public Property FileName() As String
			Get
				Return Me._FileName
			End Get
			Set
				If (String.Equals(Me._FileName, value) = false) Then
					Me.OnFileNameChanging(value)
					Me.SendPropertyChanging
					Me._FileName = value
					Me.SendPropertyChanged("FileName")
					Me.OnFileNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LOAID", DbType:="UniqueIdentifier NOT NULL")>  _
		Public Property LOAID() As System.Guid
			Get
				Return Me._LOAID
			End Get
			Set
				If ((Me._LOAID = value)  _
							= false) Then
					Me.OnLOAIDChanging(value)
					Me.SendPropertyChanging
					Me._LOAID = value
					Me.SendPropertyChanged("LOAID")
					Me.OnLOAIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CostCentre", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property CostCentre() As String
			Get
				Return Me._CostCentre
			End Get
			Set
				If (String.Equals(Me._CostCentre, value) = false) Then
					Me.OnCostCentreChanging(value)
					Me.SendPropertyChanging
					Me._CostCentre = value
					Me.SendPropertyChanged("CostCentre")
					Me.OnCostCentreChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Department", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property Department() As String
			Get
				Return Me._Department
			End Get
			Set
				If (String.Equals(Me._Department, value) = false) Then
					Me.OnDepartmentChanging(value)
					Me.SendPropertyChanging
					Me._Department = value
					Me.SendPropertyChanged("Department")
					Me.OnDepartmentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApproverName", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
		Public Property ApproverName() As String
			Get
				Return Me._ApproverName
			End Get
			Set
				If (String.Equals(Me._ApproverName, value) = false) Then
					Me.OnApproverNameChanging(value)
					Me.SendPropertyChanging
					Me._ApproverName = value
					Me.SendPropertyChanged("ApproverName")
					Me.OnApproverNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SignOffLimit", DbType:="Decimal(18,2)")>  _
		Public Property SignOffLimit() As System.Nullable(Of Decimal)
			Get
				Return Me._SignOffLimit
			End Get
			Set
				If (Me._SignOffLimit.Equals(value) = false) Then
					Me.OnSignOffLimitChanging(value)
					Me.SendPropertyChanging
					Me._SignOffLimit = value
					Me.SendPropertyChanged("SignOffLimit")
					Me.OnSignOffLimitChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DLX_Login", DbType:="NVarChar(254)")>  _
		Public Property DLX_Login() As String
			Get
				Return Me._DLX_Login
			End Get
			Set
				If (String.Equals(Me._DLX_Login, value) = false) Then
					Me.OnDLX_LoginChanging(value)
					Me.SendPropertyChanging
					Me._DLX_Login = value
					Me.SendPropertyChanged("DLX_Login")
					Me.OnDLX_LoginChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email1", DbType:="NVarChar(254)")>  _
		Public Property Email1() As String
			Get
				Return Me._Email1
			End Get
			Set
				If (String.Equals(Me._Email1, value) = false) Then
					Me.OnEmail1Changing(value)
					Me.SendPropertyChanging
					Me._Email1 = value
					Me.SendPropertyChanged("Email1")
					Me.OnEmail1Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email2", DbType:="NVarChar(254)")>  _
		Public Property Email2() As String
			Get
				Return Me._Email2
			End Get
			Set
				If (String.Equals(Me._Email2, value) = false) Then
					Me.OnEmail2Changing(value)
					Me.SendPropertyChanging
					Me._Email2 = value
					Me.SendPropertyChanged("Email2")
					Me.OnEmail2Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumApprovers", DbType:="Int")>  _
		Public Property NumApprovers() As System.Nullable(Of Integer)
			Get
				Return Me._NumApprovers
			End Get
			Set
				If (Me._NumApprovers.Equals(value) = false) Then
					Me.OnNumApproversChanging(value)
					Me.SendPropertyChanging
					Me._NumApprovers = value
					Me.SendPropertyChanged("NumApprovers")
					Me.OnNumApproversChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AutoEscalate", DbType:="Int")>  _
		Public Property AutoEscalate() As System.Nullable(Of Integer)
			Get
				Return Me._AutoEscalate
			End Get
			Set
				If (Me._AutoEscalate.Equals(value) = false) Then
					Me.OnAutoEscalateChanging(value)
					Me.SendPropertyChanging
					Me._AutoEscalate = value
					Me.SendPropertyChanged("AutoEscalate")
					Me.OnAutoEscalateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApprovalOrder", DbType:="Int")>  _
		Public Property ApprovalOrder() As System.Nullable(Of Integer)
			Get
				Return Me._ApprovalOrder
			End Get
			Set
				If (Me._ApprovalOrder.Equals(value) = false) Then
					Me.OnApprovalOrderChanging(value)
					Me.SendPropertyChanging
					Me._ApprovalOrder = value
					Me.SendPropertyChanged("ApprovalOrder")
					Me.OnApprovalOrderChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NoticeSentOn", DbType:="DateTime")>  _
		Public Property NoticeSentOn() As System.Nullable(Of Date)
			Get
				Return Me._NoticeSentOn
			End Get
			Set
				If (Me._NoticeSentOn.Equals(value) = false) Then
					Me.OnNoticeSentOnChanging(value)
					Me.SendPropertyChanging
					Me._NoticeSentOn = value
					Me.SendPropertyChanged("NoticeSentOn")
					Me.OnNoticeSentOnChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpiresOn", DbType:="DateTime")>  _
		Public Property ExpiresOn() As System.Nullable(Of Date)
			Get
				Return Me._ExpiresOn
			End Get
			Set
				If (Me._ExpiresOn.Equals(value) = false) Then
					Me.OnExpiresOnChanging(value)
					Me.SendPropertyChanging
					Me._ExpiresOn = value
					Me.SendPropertyChanged("ExpiresOn")
					Me.OnExpiresOnChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActionDate", DbType:="DateTime")>  _
		Public Property ActionDate() As System.Nullable(Of Date)
			Get
				Return Me._ActionDate
			End Get
			Set
				If (Me._ActionDate.Equals(value) = false) Then
					Me.OnActionDateChanging(value)
					Me.SendPropertyChanging
					Me._ActionDate = value
					Me.SendPropertyChanged("ActionDate")
					Me.OnActionDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DOCID", DbType:="Int")>  _
		Public Property DOCID() As System.Nullable(Of Integer)
			Get
				Return Me._DOCID
			End Get
			Set
				If (Me._DOCID.Equals(value) = false) Then
					Me.OnDOCIDChanging(value)
					Me.SendPropertyChanging
					Me._DOCID = value
					Me.SendPropertyChanged("DOCID")
					Me.OnDOCIDChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	Partial Public Class dlx_RR_GetImagePathsResult
		
		Private _docpageid As Integer
		
		Private _FilePath As String
		
		Public Sub New()
			MyBase.New
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_docpageid", DbType:="Int NOT NULL")>  _
		Public Property docpageid() As Integer
			Get
				Return Me._docpageid
			End Get
			Set
				If ((Me._docpageid = value)  _
							= false) Then
					Me._docpageid = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FilePath", DbType:="VarChar(304)")>  _
		Public Property FilePath() As String
			Get
				Return Me._FilePath
			End Get
			Set
				If (String.Equals(Me._FilePath, value) = false) Then
					Me._FilePath = value
				End If
			End Set
		End Property
	End Class
	
	Partial Public Class fn_SplitResult
		
		Private _idx As Short
		
		Private _value As String
		
		Public Sub New()
			MyBase.New
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idx", DbType:="SmallInt NOT NULL")>  _
		Public Property idx() As Short
			Get
				Return Me._idx
			End Get
			Set
				If ((Me._idx = value)  _
							= false) Then
					Me._idx = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_value", DbType:="VarChar(8000)")>  _
		Public Property value() As String
			Get
				Return Me._value
			End Get
			Set
				If (String.Equals(Me._value, value) = false) Then
					Me._value = value
				End If
			End Set
		End Property
	End Class
	
	Partial Public Class dlx_RR_Resume_GetItemResult
		
		Private _folderid As Integer
		
		Private _last As String
		
		Private _first As String
		
		Private _middle As String
		
		Private _Associate_Type As String
		
		Private _Employment_Status As String
		
		Private _DOB As String
		
		Private _SSN As String
		
		Private _doctype As String
		
		Private _docid As Integer
		
		Private _drawerid As Integer
		
		Private _Note As String
		
		Private _Document_Type As String
		
		Private _Sub_Type As String
		
		Public Sub New()
			MyBase.New
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_folderid", DbType:="Int NOT NULL")>  _
		Public Property folderid() As Integer
			Get
				Return Me._folderid
			End Get
			Set
				If ((Me._folderid = value)  _
							= false) Then
					Me._folderid = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_last", DbType:="NVarChar(50)")>  _
		Public Property last() As String
			Get
				Return Me._last
			End Get
			Set
				If (String.Equals(Me._last, value) = false) Then
					Me._last = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_first", DbType:="NVarChar(50)")>  _
		Public Property first() As String
			Get
				Return Me._first
			End Get
			Set
				If (String.Equals(Me._first, value) = false) Then
					Me._first = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_middle", DbType:="NVarChar(1)")>  _
		Public Property middle() As String
			Get
				Return Me._middle
			End Get
			Set
				If (String.Equals(Me._middle, value) = false) Then
					Me._middle = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Associate Type]", Storage:="_Associate_Type", DbType:="VarChar(255)")>  _
		Public Property Associate_Type() As String
			Get
				Return Me._Associate_Type
			End Get
			Set
				If (String.Equals(Me._Associate_Type, value) = false) Then
					Me._Associate_Type = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Employment Status]", Storage:="_Employment_Status", DbType:="VarChar(255)")>  _
		Public Property Employment_Status() As String
			Get
				Return Me._Employment_Status
			End Get
			Set
				If (String.Equals(Me._Employment_Status, value) = false) Then
					Me._Employment_Status = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DOB", DbType:="NVarChar(15)")>  _
		Public Property DOB() As String
			Get
				Return Me._DOB
			End Get
			Set
				If (String.Equals(Me._DOB, value) = false) Then
					Me._DOB = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SSN", DbType:="NVarChar(11)")>  _
		Public Property SSN() As String
			Get
				Return Me._SSN
			End Get
			Set
				If (String.Equals(Me._SSN, value) = false) Then
					Me._SSN = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_doctype", DbType:="VarChar(254)")>  _
		Public Property doctype() As String
			Get
				Return Me._doctype
			End Get
			Set
				If (String.Equals(Me._doctype, value) = false) Then
					Me._doctype = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_docid", DbType:="Int NOT NULL")>  _
		Public Property docid() As Integer
			Get
				Return Me._docid
			End Get
			Set
				If ((Me._docid = value)  _
							= false) Then
					Me._docid = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_drawerid", DbType:="Int NOT NULL")>  _
		Public Property drawerid() As Integer
			Get
				Return Me._drawerid
			End Get
			Set
				If ((Me._drawerid = value)  _
							= false) Then
					Me._drawerid = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note", DbType:="NVarChar(200)")>  _
		Public Property Note() As String
			Get
				Return Me._Note
			End Get
			Set
				If (String.Equals(Me._Note, value) = false) Then
					Me._Note = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Document Type]", Storage:="_Document_Type", DbType:="VarChar(255)")>  _
		Public Property Document_Type() As String
			Get
				Return Me._Document_Type
			End Get
			Set
				If (String.Equals(Me._Document_Type, value) = false) Then
					Me._Document_Type = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Sub Type]", Storage:="_Sub_Type", DbType:="VarChar(255)")>  _
		Public Property Sub_Type() As String
			Get
				Return Me._Sub_Type
			End Get
			Set
				If (String.Equals(Me._Sub_Type, value) = false) Then
					Me._Sub_Type = value
				End If
			End Set
		End Property
	End Class
	
	Partial Public Class dlx_RR_SpecialPricingResult
		
		Private _DocTypeDescription As String
		
		Private _docid As Integer
		
		Private _drawerid As Integer
		
		Private _folderid As Integer
		
		Private _doccopyid As Integer
		
		Private _createdate As String
		
		Private _field00 As String
		
		Private _filepath As String
		
		Public Sub New()
			MyBase.New
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocTypeDescription", DbType:="VarChar(255)")>  _
		Public Property DocTypeDescription() As String
			Get
				Return Me._DocTypeDescription
			End Get
			Set
				If (String.Equals(Me._DocTypeDescription, value) = false) Then
					Me._DocTypeDescription = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_docid", DbType:="Int NOT NULL")>  _
		Public Property docid() As Integer
			Get
				Return Me._docid
			End Get
			Set
				If ((Me._docid = value)  _
							= false) Then
					Me._docid = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_drawerid", DbType:="Int NOT NULL")>  _
		Public Property drawerid() As Integer
			Get
				Return Me._drawerid
			End Get
			Set
				If ((Me._drawerid = value)  _
							= false) Then
					Me._drawerid = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_folderid", DbType:="Int NOT NULL")>  _
		Public Property folderid() As Integer
			Get
				Return Me._folderid
			End Get
			Set
				If ((Me._folderid = value)  _
							= false) Then
					Me._folderid = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_doccopyid", DbType:="Int NOT NULL")>  _
		Public Property doccopyid() As Integer
			Get
				Return Me._doccopyid
			End Get
			Set
				If ((Me._doccopyid = value)  _
							= false) Then
					Me._doccopyid = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdate", DbType:="NVarChar(14)")>  _
		Public Property createdate() As String
			Get
				Return Me._createdate
			End Get
			Set
				If (String.Equals(Me._createdate, value) = false) Then
					Me._createdate = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_field00", DbType:="NVarChar(15)")>  _
		Public Property field00() As String
			Get
				Return Me._field00
			End Get
			Set
				If (String.Equals(Me._field00, value) = false) Then
					Me._field00 = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_filepath", DbType:="VarChar(500)")>  _
		Public Property filepath() As String
			Get
				Return Me._filepath
			End Get
			Set
				If (String.Equals(Me._filepath, value) = false) Then
					Me._filepath = value
				End If
			End Set
		End Property
	End Class
	
	Partial Public Class dlx_RR_SpecialPricing_GetPendingACKsResult
		
		Private _Description As String
		
		Private _docid As Integer
		
		Private _drawerid As Integer
		
		Private _folderid As Integer
		
		Private _doccopyid As Integer
		
		Private _createdate As System.Nullable(Of Date)
		
		Private _field00 As String
		
		Private _filepath As String
		
		Public Sub New()
			MyBase.New
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(255)")>  _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set
				If (String.Equals(Me._Description, value) = false) Then
					Me._Description = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_docid", DbType:="Int NOT NULL")>  _
		Public Property docid() As Integer
			Get
				Return Me._docid
			End Get
			Set
				If ((Me._docid = value)  _
							= false) Then
					Me._docid = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_drawerid", DbType:="Int NOT NULL")>  _
		Public Property drawerid() As Integer
			Get
				Return Me._drawerid
			End Get
			Set
				If ((Me._drawerid = value)  _
							= false) Then
					Me._drawerid = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_folderid", DbType:="Int NOT NULL")>  _
		Public Property folderid() As Integer
			Get
				Return Me._folderid
			End Get
			Set
				If ((Me._folderid = value)  _
							= false) Then
					Me._folderid = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_doccopyid", DbType:="Int NOT NULL")>  _
		Public Property doccopyid() As Integer
			Get
				Return Me._doccopyid
			End Get
			Set
				If ((Me._doccopyid = value)  _
							= false) Then
					Me._doccopyid = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdate", DbType:="DateTime")>  _
		Public Property createdate() As System.Nullable(Of Date)
			Get
				Return Me._createdate
			End Get
			Set
				If (Me._createdate.Equals(value) = false) Then
					Me._createdate = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_field00", DbType:="NVarChar(15)")>  _
		Public Property field00() As String
			Get
				Return Me._field00
			End Get
			Set
				If (String.Equals(Me._field00, value) = false) Then
					Me._field00 = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_filepath", DbType:="VarChar(500)")>  _
		Public Property filepath() As String
			Get
				Return Me._filepath
			End Get
			Set
				If (String.Equals(Me._filepath, value) = false) Then
					Me._filepath = value
				End If
			End Set
		End Property
	End Class
End Namespace
